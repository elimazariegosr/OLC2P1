/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,14],$V2=[1,19],$V3=[1,20],$V4=[1,21],$V5=[1,15],$V6=[1,16],$V7=[1,12],$V8=[5,7,8,15,30,37,38,39,44,45],$V9=[1,27],$Va=[1,30],$Vb=[1,32],$Vc=[1,41],$Vd=[1,43],$Ve=[1,38],$Vf=[1,39],$Vg=[1,40],$Vh=[20,31],$Vi=[19,20,31,56,57,58,59,60,61,62,63,64,65,66,67],$Vj=[1,54],$Vk=[1,60],$Vl=[1,61],$Vm=[1,62],$Vn=[1,63],$Vo=[1,64],$Vp=[1,65],$Vq=[1,66],$Vr=[1,67],$Vs=[1,68],$Vt=[1,69],$Vu=[1,70],$Vv=[1,71],$Vw=[1,78],$Vx=[1,79],$Vy=[1,80],$Vz=[1,81],$VA=[1,82],$VB=[19,20],$VC=[1,92],$VD=[1,96],$VE=[19,20,31,56,57,59,60,61,62,63,64,65,66,67],$VF=[13,19,20,31,36],$VG=[5,7,8,15,30,37,38,39,42,44,45],$VH=[11,13],$VI=[19,20,31,56,57,60,61,62,63,64,65,66,67],$VJ=[19,20,31,60,61,62,63,64,65,66,67],$VK=[19,20,31,64,65,66,67],$VL=[7,8,15,30,37,38,39,44,45];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"SENTENCIAS":4,"EOF":5,"FUNCION":6,"TK_FUNCTION":7,"TK_ID":8,"PARAMETROS":9,"CONT_FUNCION":10,"TK_DOS_PUNTOS":11,"TIPO":12,"TK_LL_ABRE":13,"LISTA_CONT_FUNCION":14,"TK_LL_CIERRA":15,"CONT_BLOQUE_FUNCION":16,"TK_P_ABRE":17,"LISTA_PARAMETROS":18,"TK_P_CIERRA":19,"TK_COMA":20,"PARAMETRO":21,"CONT_SENTENCIAS":22,"IMPRIMIR":23,"DECLARACION_VARIABLE":24,"ASiGNACION_VARIABLE":25,"SENTENCIA_IF":26,"SENTENCIA_WHILE":27,"LLAMADA_FUNCION":28,"RETURN":29,"TK_RETURN":30,"TK_P_COMA":31,"EXPRESION":32,"TIPO_DECLARACION":33,"LISTA_DECLARACION":34,"DECLARACION":35,"TK_IGUAL":36,"TK_LET":37,"TK_CONST":38,"TK_IF":39,"CONDICIONAL":40,"CONT_CONTROL":41,"TK_ELSE":42,"IF":43,"TK_WHILE":44,"TK_CONSOLE":45,"TK_PUNTO":46,"TK_LOG":47,"TK_NUMBER":48,"TK_STRING":49,"TK_VOID":50,"TK_BOOLEAN":51,"TK_ANY":52,"LLAMADA_FUNCION_EXP":53,"CONT_LLAMADA":54,"LISTA_CONT_LLAMADA":55,"TK_MAS":56,"TK_MENOS":57,"TK_MULTI":58,"TK_DIV":59,"TK_MAYOR":60,"TK_MENOR":61,"TK_MAYOR_IGUAL":62,"TK_MENOR_IGUAL":63,"TK_IGUAL_IGUAL":64,"TK_DISTINTO":65,"TK_AND":66,"TK_OR":67,"TK_NOT":68,"TK_CADENA":69,"TK_NUMERO":70,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"TK_FUNCTION",8:"TK_ID",11:"TK_DOS_PUNTOS",13:"TK_LL_ABRE",15:"TK_LL_CIERRA",17:"TK_P_ABRE",19:"TK_P_CIERRA",20:"TK_COMA",30:"TK_RETURN",31:"TK_P_COMA",36:"TK_IGUAL",37:"TK_LET",38:"TK_CONST",39:"TK_IF",42:"TK_ELSE",43:"IF",44:"TK_WHILE",45:"TK_CONSOLE",46:"TK_PUNTO",47:"TK_LOG",48:"TK_NUMBER",49:"TK_STRING",50:"TK_VOID",51:"TK_BOOLEAN",52:"TK_ANY",56:"TK_MAS",57:"TK_MENOS",58:"TK_MULTI",59:"TK_DIV",60:"TK_MAYOR",61:"TK_MENOR",62:"TK_MAYOR_IGUAL",63:"TK_MENOR_IGUAL",64:"TK_IGUAL_IGUAL",65:"TK_DISTINTO",66:"TK_AND",67:"TK_OR",68:"TK_NOT",69:"TK_CADENA",70:"TK_NUMERO"},
productions_: [0,[3,2],[6,4],[6,6],[10,3],[10,2],[14,2],[14,1],[16,1],[16,1],[9,3],[9,2],[18,3],[18,1],[21,1],[21,3],[4,2],[4,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[29,2],[29,3],[24,3],[34,3],[34,1],[35,1],[35,3],[35,3],[35,5],[33,1],[33,1],[25,4],[26,3],[26,5],[26,5],[27,3],[40,3],[41,3],[41,2],[23,7],[12,1],[12,1],[12,1],[12,1],[12,1],[28,2],[53,2],[54,2],[54,3],[55,3],[55,1],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,2],[32,1],[32,1],[32,1],[32,1],[32,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = new Arbol($$[$0-1]); console.log($$[$0-1]); return this.$;
break;
case 2:
this.$ = new Funcion($$[$0-2],$$[$0-1],$$[$0],null,0,0);
break;
case 3:
this.$ = new Funcion($$[$0-4],$$[$0-3],$$[$0],$$[$0-1],0,0);
break;
case 4: case 10: case 42: case 43: case 51: case 74:
this.$ = $$[$0-1];
break;
case 5: case 11: case 44: case 53:
this.$ = [];
break;
case 6: case 16:
 this.$ = $$[$0-1]; this.$ = agregar_vars($$[$0], this.$);
break;
case 7: case 17:
this.$ = []; this.$ = agregar_vars($$[$0], this.$);
break;
case 8:
this.$ = ["sent",$$[$0]];
break;
case 9: case 18: case 20: case 21: case 22: case 25:
this.$ = ["",$$[$0]];
break;
case 12: case 29:
 this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 13: case 30:
this.$ = [$$[$0]];
break;
case 14: case 31:
 this.$ = new Declaracion(null, $$[$0], null, 0,0);
break;
case 15: case 33:
 this.$ = new Declaracion($$[$0], $$[$0-2], null,0,0);
break;
case 19: case 35: case 36:
this.$ = $$[$0];
break;
case 23: case 24:
this.$ = ["", $$[$0]];
break;
case 26:
this.$ = new Return(null,0,0);
break;
case 27:
this.$ = new Return($$[$0-1], 0,0);
break;
case 28:
this.$ = [$$[$0-2],$$[$0-1]];
break;
case 32:
 this.$ = new Declaracion(null, $$[$0-2], $$[$0], 0,0);
break;
case 34:
 this.$ = new Declaracion($$[$0-2], $$[$0-4], $$[$0],0,0);
break;
case 37:
this.$ = new Asignacion($$[$0-3],$$[$0-1],0,0);
break;
case 38:
this.$ = new If($$[$0-1], $$[$0], [],0,0);
break;
case 39:
this.$ = new If($$[$0-3], $$[$0-2], $$[$0],0,0);
break;
case 40:
this.$ = new If($$[$0-3], $$[$0-2], [$$[$0]],0,0);
break;
case 41:
this.$ = new While($$[$0-1], $$[$0],0,0);
break;
case 45:
this.$ = new Imprimir($$[$0-2], 0, 0);
break;
case 46:
 this.$ = new Tipo(tipos.NUMBER);
break;
case 47:
 this.$ = new Tipo(tipos.STRING);
break;
case 48:
 this.$ = new Tipo(tipos.VOID);
break;
case 49:
 this.$ = new Tipo(tipos.BOOLEAN);
break;
case 50:
 this.$ = new Tipo(tipos.ANY);
break;
case 52:
this.$ = new Llamada_funcion($$[$0-1],$$[$0], 0,0);
break;
case 54:
this.$ = $$[$0-1]
break;
case 55:
this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 56:
 this.$ = [$$[$0]];
break;
case 57: case 58: case 59: case 60:
this.$ = new Aritmetica($$[$0-2],$$[$0],$$[$0-1],_$.first_line, _$.first_column);
break;
case 61: case 62: case 63: case 64: case 65: case 66:
this.$ = new Relacional($$[$0-2],$$[$0],$$[$0-1],0,0);
break;
case 67: case 68:
this.$ = new Logica($$[$0-2],$$[$0],$$[$0-1],0,0);
break;
case 69:
this.$ = new Logica($$[$0],null,$$[$0-1],0,0);
break;
case 70:
this.$ = new Primitivo(new Tipo(tipos.STRING), $$[$0].replace(/\"/g,"").replace(/\'/g,""),_$.first_line, _$.first_column);
break;
case 71:
this.$ = new Primitivo(new Tipo(tipos.NUMBER), Number($$[$0]),_$.first_line, _$.first_column);
break;
case 72:
 this.$ = new Identificador($$[$0], _$.first_line, _$.first_column); 
break;
case 73:
this.$  = $$[$0];
break;
}
},
table: [{3:1,4:2,6:9,7:$V0,8:$V1,22:3,23:4,24:5,25:6,26:7,27:8,28:10,29:11,30:$V2,33:13,37:$V3,38:$V4,39:$V5,44:$V6,45:$V7,53:18},{1:[3]},{5:[1,22],6:9,7:$V0,8:$V1,22:23,23:4,24:5,25:6,26:7,27:8,28:10,29:11,30:$V2,33:13,37:$V3,38:$V4,39:$V5,44:$V6,45:$V7,53:18},o($V8,[2,17]),o($V8,[2,18]),o($V8,[2,19]),o($V8,[2,20]),o($V8,[2,21]),o($V8,[2,22]),o($V8,[2,23]),o($V8,[2,24]),o($V8,[2,25]),{46:[1,24]},{8:$V9,34:25,35:26},{17:$Va,36:[1,28],54:29},{17:$Vb,40:31},{17:$Vb,40:33},{8:[1,34]},{31:[1,35]},{8:$Vc,17:$Vd,31:[1,36],32:37,53:42,68:$Ve,69:$Vf,70:$Vg},{8:[2,35]},{8:[2,36]},{1:[2,1]},o($V8,[2,16]),{47:[1,44]},{20:[1,46],31:[1,45]},o($Vh,[2,30]),o($Vh,[2,31],{11:[1,48],36:[1,47]}),{8:$Vc,17:$Vd,32:49,53:42,68:$Ve,69:$Vf,70:$Vg},o($Vi,[2,52]),{8:$Vc,17:$Vd,19:[1,50],32:52,53:42,55:51,68:$Ve,69:$Vf,70:$Vg},{13:$Vj,41:53},{8:$Vc,17:$Vd,32:55,53:42,68:$Ve,69:$Vf,70:$Vg},{13:$Vj,41:56},{9:57,17:[1,58]},o($V8,[2,51]),o($V8,[2,26]),{31:[1,59],56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv},{8:$Vc,17:$Vd,32:72,53:42,68:$Ve,69:$Vf,70:$Vg},o($Vi,[2,70]),o($Vi,[2,71]),o($Vi,[2,72],{54:29,17:$Va}),o($Vi,[2,73]),{8:$Vc,17:$Vd,32:73,53:42,68:$Ve,69:$Vf,70:$Vg},{17:[1,74]},o($V8,[2,28]),{8:$V9,35:75},{8:$Vc,17:$Vd,32:76,53:42,68:$Ve,69:$Vf,70:$Vg},{12:77,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA},{31:[1,83],56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv},o($Vi,[2,53]),{19:[1,84],20:[1,85]},o($VB,[2,56],{56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv}),o($V8,[2,38],{42:[1,86]}),{4:87,6:9,7:$V0,8:$V1,15:[1,88],22:3,23:4,24:5,25:6,26:7,27:8,28:10,29:11,30:$V2,33:13,37:$V3,38:$V4,39:$V5,44:$V6,45:$V7,53:18},{19:[1,89],56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv},o($V8,[2,41]),{10:90,11:[1,91],13:$VC},{8:$VD,18:93,19:[1,94],21:95},o($V8,[2,27]),{8:$Vc,17:$Vd,32:97,53:42,68:$Ve,69:$Vf,70:$Vg},{8:$Vc,17:$Vd,32:98,53:42,68:$Ve,69:$Vf,70:$Vg},{8:$Vc,17:$Vd,32:99,53:42,68:$Ve,69:$Vf,70:$Vg},{8:$Vc,17:$Vd,32:100,53:42,68:$Ve,69:$Vf,70:$Vg},{8:$Vc,17:$Vd,32:101,53:42,68:$Ve,69:$Vf,70:$Vg},{8:$Vc,17:$Vd,32:102,53:42,68:$Ve,69:$Vf,70:$Vg},{8:$Vc,17:$Vd,32:103,53:42,68:$Ve,69:$Vf,70:$Vg},{8:$Vc,17:$Vd,32:104,53:42,68:$Ve,69:$Vf,70:$Vg},{8:$Vc,17:$Vd,32:105,53:42,68:$Ve,69:$Vf,70:$Vg},{8:$Vc,17:$Vd,32:106,53:42,68:$Ve,69:$Vf,70:$Vg},{8:$Vc,17:$Vd,32:107,53:42,68:$Ve,69:$Vf,70:$Vg},{8:$Vc,17:$Vd,32:108,53:42,68:$Ve,69:$Vf,70:$Vg},o($VE,[2,69],{58:$Vm}),{19:[1,109],56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv},{8:$Vc,17:$Vd,32:110,53:42,68:$Ve,69:$Vf,70:$Vg},o($Vh,[2,29]),o($Vh,[2,32],{56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv}),o($Vh,[2,33],{36:[1,111]}),o($VF,[2,46]),o($VF,[2,47]),o($VF,[2,48]),o($VF,[2,49]),o($VF,[2,50]),o($V8,[2,37]),o($Vi,[2,54]),{8:$Vc,17:$Vd,32:112,53:42,68:$Ve,69:$Vf,70:$Vg},{13:$Vj,41:113,43:[1,114]},{6:9,7:$V0,8:$V1,15:[1,115],22:23,23:4,24:5,25:6,26:7,27:8,28:10,29:11,30:$V2,33:13,37:$V3,38:$V4,39:$V5,44:$V6,45:$V7,53:18},o($VG,[2,44]),{13:[2,42]},o($V8,[2,2]),{12:116,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA},{4:120,6:121,7:$V0,8:$V1,14:117,15:[1,118],16:119,22:3,23:4,24:5,25:6,26:7,27:8,28:10,29:11,30:$V2,33:13,37:$V3,38:$V4,39:$V5,44:$V6,45:$V7,53:18},{19:[1,122],20:[1,123]},o($VH,[2,11]),o($VB,[2,13]),o($VB,[2,14],{11:[1,124]}),o($VI,[2,57],{58:$Vm,59:$Vn}),o($VI,[2,58],{58:$Vm,59:$Vn}),o([19,20,31],[2,59],{56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv}),o($VE,[2,60],{58:$Vm}),o($VJ,[2,61],{56:$Vk,57:$Vl,58:$Vm,59:$Vn}),o($VJ,[2,62],{56:$Vk,57:$Vl,58:$Vm,59:$Vn}),o($VJ,[2,63],{56:$Vk,57:$Vl,58:$Vm,59:$Vn}),o($VJ,[2,64],{56:$Vk,57:$Vl,58:$Vm,59:$Vn}),o($VK,[2,65],{56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr}),o($VK,[2,66],{56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr}),o([19,20,31,66,67],[2,67],{56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt}),o([19,20,31,67],[2,68],{56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu}),o($Vi,[2,74]),{19:[1,125],56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv},{8:$Vc,17:$Vd,32:126,53:42,68:$Ve,69:$Vf,70:$Vg},o($VB,[2,55],{56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv}),o($V8,[2,39]),o($V8,[2,40]),o($VG,[2,43]),{10:127,13:$VC},{4:120,6:121,7:$V0,8:$V1,15:[1,128],16:129,22:3,23:4,24:5,25:6,26:7,27:8,28:10,29:11,30:$V2,33:13,37:$V3,38:$V4,39:$V5,44:$V6,45:$V7,53:18},o($V8,[2,5]),o($VL,[2,7]),{6:9,7:$V0,8:$V1,15:[2,8],22:23,23:4,24:5,25:6,26:7,27:8,28:10,29:11,30:$V2,33:13,37:$V3,38:$V4,39:$V5,44:$V6,45:$V7,53:18},o($VL,[2,9]),o($VH,[2,10]),{8:$VD,21:130},{12:131,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA},{31:[1,132]},o($Vh,[2,34],{56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv}),o($V8,[2,3]),o($V8,[2,4]),o($VL,[2,6]),o($VB,[2,12]),o($VB,[2,15]),o($V8,[2,45])],
defaultActions: {20:[2,35],21:[2,36],22:[2,1],89:[2,42]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const {Imprimir} = require('./Instrucciones/Imprimir');
    const {Tipo, tipos} = require('./AST/Tipo'); 
    const {Arbol} = require('./AST/Arbol'); 
    const {Primitivo} = require('./Expresiones/Primitivo');
    const {Aritmetica} = require('./Expresiones/Aritmetica');
    const {Relacional} = require('./Expresiones/Relacional');
    const {Logica} = require('./Expresiones/Logica');
    const {Return} = require('./Expresiones/Return');
    const {Continue} = require('./Expresiones/Continue');
    const {Break} = require('./Expresiones/Break');

    const {Identificador} = require('./Instrucciones/Identificador');
    const {Declaracion} = require('./Instrucciones/Declaracion');
    const {Asignacion} = require('./Instrucciones/Asignacion');
    const {If} = require('./Instrucciones/If');
    const {While} = require('./Instrucciones/While');
    const {Funcion} = require('./Instrucciones/Funcion');
    const {Llamada_funcion} = require('./Instrucciones/Llamada_funcion');

    function agregar_vars(arreglo, lista){
        if(arreglo[0] != ""){
                arreglo[1].forEach(element => {
                        lista.push(element);
                });
        }else{
                lista.push(arreglo[1]);
        }
        return lista;
    }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"ranges":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:this.begin('comment');
break;
case 2:this.popState();
break;
case 3:/* skip comment content*/
break;
case 4:/* skip whitespace */
break;
case 5:return 49;
break;
case 6:return 48;
break;
case 7:return 51;
break;
case 8:return 50;
break;
case 9:return 'TK_VAR';
break;
case 10:return 37;
break;
case 11:return 38;
break;
case 12:return 52;
break;
case 13:return 'TK_ARRAY';
break;
case 14:return 'TK_PUSH';
break;
case 15:return 'TK_POP';
break;
case 16:return 'TK_LENGTH';
break;
case 17:return 39;
break;
case 18:return 42;
break;
case 19:return 'TK_SWITCH';
break;
case 20:return 'TK_CASE';
break;
case 21:return 'TK_DEFAULT';
break;
case 22:return 'TK_FOR';
break;
case 23:return 'TK_OF';
break;
case 24:return 'TK_IN';
break;
case 25:return 44;
break;
case 26:return 'TK_DO';
break;
case 27:return 'TK_BREAK';
break;
case 28:return 'TK_CONTINUE';
break;
case 29:return 30;
break;
case 30:return 7;
break;
case 31:return 45;
break;
case 32:return 47;
break;
case 33:return 'TK_TRUE';
break;
case 34:return 'TK_FALSE';
break;
case 35:return 13; 
break;
case 36:return 15;
break;
case 37:return 17;
break;
case 38:return 19;
break;
case 39:return 'TK_C_ABRE';
break;
case 40:return 'TK_C_CIERRA';
break;
case 41:return 20;
break;
case 42:return 'TK_INTERROGACION';
break;
case 43:return 11;
break;
case 44:return 31;
break;
case 45:return 63;
break;
case 46:return 61;
break;
case 47:return 64;
break;
case 48:return 62;
break;
case 49:return 60;
break;
case 50:return 65;
break;
case 51:return 67;
break;
case 52:return 66;
break;
case 53:return 68;
break;
case 54:return 36;
break;
case 55:return 'TK_MAS_IGUAL';
break;
case 56:return 'TK_MENOS_IGUAL';
break;
case 57:return 'TK_MULTI_IGUAL';
break;
case 58:return 'TK_DIV_IGUAL';
break;
case 59:return 'TK_MOD_IGUAL';
break;
case 60:return 'TK_MAS_MAS';
break;
case 61:return 56;
break;
case 62:return 'TK_MENOS_MENOS';
break;
case 63:return 57;
break;
case 64:return 58;
break;
case 65:return 59;
break;
case 66:return 'TK_MOD';
break;
case 67:return 'TK_ELEVADO';
break;
case 68:return 46;
break;
case 69:return 'TK_NULO';
break;
case 70:return 8; /* Varying form */
break;
case 71:return 70;
break;
case 72:return 70;
break;
case 73:return 69;
break;
case 74:return 69;
break;
case 75:return 69;
break;
case 76:return 69;
break;
case 77:return 5;
break;
case 78:
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\/\*)/,/^(?:\*\/)/,/^(?:.)/,/^(?:\s+)/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:var\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:any\b)/,/^(?:Array\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:for\b)/,/^(?:of\b)/,/^(?:in\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:function\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:\?)/,/^(?::)/,/^(?:;)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:>=)/,/^(?:>)/,/^(?:!=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:=)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:--)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\^)/,/^(?:\.)/,/^(?:null\b)/,/^(?:[_a-zA-Z][a-zA-Z0-9_]*)/,/^(?:(((0|([1-9])([0-9])*))\.((0|([1-9])([0-9])*))+))/,/^(?:((0|([1-9])([0-9])*)))/,/^(?:"")/,/^(?:"([^"]|(\\.))*")/,/^(?:\\'\\')/,/^(?:\\'([^']|(\\.))*\\')/,/^(?:$)/,/^(?:.)/],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78],"inclusive":true},"INITIAL":{"rules":[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}