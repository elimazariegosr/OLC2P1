/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,28],$V1=[1,37],$V2=[1,30],$V3=[1,34],$V4=[1,35],$V5=[1,39],$V6=[1,40],$V7=[1,36],$V8=[1,33],$V9=[1,25],$Va=[1,26],$Vb=[1,27],$Vc=[1,31],$Vd=[1,22],$Ve=[5,7,8,15,40,43,44,49,50,60,67,72,74,76,78,79,80,86],$Vf=[5,7,8,15,40,41,43,44,49,50,60,67,72,74,76,78,79,80,86],$Vg=[1,49],$Vh=[1,52],$Vi=[1,63],$Vj=[1,66],$Vk=[1,57],$Vl=[1,58],$Vm=[1,59],$Vn=[1,60],$Vo=[1,61],$Vp=[1,62],$Vq=[1,76],$Vr=[1,74],$Vs=[1,75],$Vt=[20,41],$Vu=[2,43],$Vv=[1,83],$Vw=[1,93],$Vx=[1,94],$Vy=[1,95],$Vz=[1,96],$VA=[1,97],$VB=[1,98],$VC=[1,99],$VD=[1,100],$VE=[1,101],$VF=[1,102],$VG=[1,103],$VH=[1,104],$VI=[1,105],$VJ=[11,15,19,20,41,56,100,101,102,103,104,105,106,107,108,109,110,111,113],$VK=[1,112],$VL=[5,7,8,11,15,19,20,40,41,43,44,49,50,56,60,67,72,74,76,78,79,80,86,100,101,102,103,104,105,106,107,108,109,110,111,113],$VM=[1,134],$VN=[1,129],$VO=[1,130],$VP=[1,131],$VQ=[1,132],$VR=[1,133],$VS=[5,7,8,15,40,43,44,49,50,60,67,72,74,76,77,78,79,80,86],$VT=[1,142],$VU=[1,146],$VV=[11,15,19,20,41,56,100,101,104,105,106,107,108,109,110,111,113],$VW=[11,15,19,20,41,56,100,101,103,104,105,106,107,108,109,110,111,113],$VX=[19,41],$VY=[1,168],$VZ=[1,169],$V_=[1,173],$V$=[19,20],$V01=[1,180],$V11=[2,45],$V21=[1,182],$V31=[1,184],$V41=[13,15,19,20,41,48,54],$V51=[11,13],$V61=[11,15,19,20,41,56],$V71=[11,15,19,20,41,56,104,105,106,107,108,109,110,111,113],$V81=[11,15,19,20,41,56,108,109,110,111,113],$V91=[15,72,74],$Va1=[1,208],$Vb1=[15,20],$Vc1=[41,48,54],$Vd1=[1,219],$Ve1=[7,8,15,40,43,44,49,50,60,67,76,78,79,80,86],$Vf1=[1,253],$Vg1=[20,56];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"SENTENCIAS":4,"EOF":5,"FUNCION":6,"TK_FUNCTION":7,"TK_ID":8,"PARAMETROS":9,"CONT_FUNCION":10,"TK_DOS_PUNTOS":11,"TIPO":12,"TK_LL_ABRE":13,"LISTA_CONT_FUNCION":14,"TK_LL_CIERRA":15,"CONT_BLOQUE_FUNCION":16,"TK_P_ABRE":17,"LISTA_PARAMETROS":18,"TK_P_CIERRA":19,"TK_COMA":20,"PARAMETRO":21,"CONT_SENTENCIAS":22,"IMPRIMIR":23,"DECLARACION_VARIABLE":24,"ASiGNACION_VARIABLE":25,"SENTENCIA_IF":26,"SENTENCIA_WHILE":27,"SENTENCIA_DO_WHILE":28,"LLAMADA_FUNCION":29,"RETURN":30,"SENTENCIA_FOR":31,"SENTENCIA_FOR_1":32,"SENT_INC_DEC":33,"SENTENCIA_SWITCH":34,"BREAK":35,"CONTINUE":36,"DECLARACION_ARREGLO":37,"DECLARACION_TYPE":38,"ASIGNACION_TYPE":39,"TK_RETURN":40,"TK_P_COMA":41,"EXPRESION":42,"TK_BREAK":43,"TK_CONTINUE":44,"TIPO_DECLARACION":45,"LISTA_DECLARACION":46,"DECLARACION":47,"TK_IGUAL":48,"TK_LET":49,"TK_CONST":50,"ASIGNACION":51,"TIPO_ARREGLO":52,"CONT_ARREGLO":53,"TK_C_ABRE":54,"LISTA_CONT_ARREGLO":55,"TK_C_C":56,"IERRA":57,"CONT_TIPO_ARREGLO":58,"TK_C_CIERRA":59,"TK_TYPE":60,"LISTA_CONT_TYPE":61,"CONT_TYPE":62,"LISTA_ASIG_TYPE":63,"LISTA_ID_TYPE":64,"TK_PUNTO":65,"CONT_ASIG_TIPE":66,"TK_SWITCH":67,"CONDICIONAL":68,"CONT_SWITCH":69,"LISTA_CASES":70,"CASES":71,"TK_CASE":72,"CONT_CASE":73,"TK_DEFAULT":74,"CONT_CONTROL":75,"TK_IF":76,"TK_ELSE":77,"TK_WHILE":78,"TK_DO":79,"TK_FOR":80,"ASING_DEC_FOR":81,"CONT_FOR":82,"TIPO_FOR_1":83,"TK_IN":84,"TK_OF":85,"TK_CONSOLE":86,"TK_LOG":87,"CONT_IMPRIMIR":88,"TK_NUMBER":89,"TK_STRING":90,"TK_VOID":91,"TK_BOOLEAN":92,"TK_ANY":93,"LLAMADA_FUNCION_EXP":94,"CONT_LLAMADA":95,"LISTA_CONT_LLAMADA":96,"INC_DEC":97,"TK_MAS_MAS":98,"TK_MENOS_MENOS":99,"TK_MAS":100,"TK_MENOS":101,"TK_MULTI":102,"TK_DIV":103,"TK_MAYOR":104,"TK_MENOR":105,"TK_MAYOR_IGUAL":106,"TK_MENOR_IGUAL":107,"TK_IGUAL_IGUAL":108,"TK_DISTINTO":109,"TK_AND":110,"TK_OR":111,"TK_NOT":112,"TK_INTERROGACION":113,"TK_CADENA":114,"TK_NUMERO":115,"TK_TRUE":116,"TK_FALSE":117,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"TK_FUNCTION",8:"TK_ID",11:"TK_DOS_PUNTOS",13:"TK_LL_ABRE",15:"TK_LL_CIERRA",17:"TK_P_ABRE",19:"TK_P_CIERRA",20:"TK_COMA",40:"TK_RETURN",41:"TK_P_COMA",43:"TK_BREAK",44:"TK_CONTINUE",48:"TK_IGUAL",49:"TK_LET",50:"TK_CONST",54:"TK_C_ABRE",56:"TK_C_C",57:"IERRA",59:"TK_C_CIERRA",60:"TK_TYPE",65:"TK_PUNTO",67:"TK_SWITCH",72:"TK_CASE",74:"TK_DEFAULT",76:"TK_IF",77:"TK_ELSE",78:"TK_WHILE",79:"TK_DO",80:"TK_FOR",84:"TK_IN",85:"TK_OF",86:"TK_CONSOLE",87:"TK_LOG",89:"TK_NUMBER",90:"TK_STRING",91:"TK_VOID",92:"TK_BOOLEAN",93:"TK_ANY",98:"TK_MAS_MAS",99:"TK_MENOS_MENOS",100:"TK_MAS",101:"TK_MENOS",102:"TK_MULTI",103:"TK_DIV",104:"TK_MAYOR",105:"TK_MENOR",106:"TK_MAYOR_IGUAL",107:"TK_MENOR_IGUAL",108:"TK_IGUAL_IGUAL",109:"TK_DISTINTO",110:"TK_AND",111:"TK_OR",112:"TK_NOT",113:"TK_INTERROGACION",114:"TK_CADENA",115:"TK_NUMERO",116:"TK_TRUE",117:"TK_FALSE"},
productions_: [0,[3,2],[6,4],[6,6],[10,3],[10,2],[14,2],[14,1],[16,1],[16,1],[9,3],[9,2],[18,3],[18,1],[21,1],[21,3],[4,2],[4,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[30,2],[30,3],[35,2],[36,2],[24,3],[46,3],[46,1],[47,1],[47,3],[47,3],[47,5],[45,1],[45,1],[25,2],[25,2],[51,3],[51,1],[37,6],[37,8],[53,4],[53,1],[55,3],[55,1],[52,2],[52,1],[58,2],[38,7],[61,3],[61,1],[62,3],[62,3],[39,6],[39,4],[64,3],[64,1],[63,3],[63,1],[66,3],[34,3],[69,3],[69,2],[70,2],[70,1],[71,4],[71,3],[71,3],[71,2],[73,1],[73,1],[26,3],[26,5],[26,5],[27,3],[28,5],[68,3],[75,3],[75,2],[31,9],[82,2],[82,3],[81,2],[81,1],[32,8],[83,1],[83,1],[23,5],[88,3],[88,2],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[29,2],[94,2],[95,2],[95,3],[96,3],[96,1],[97,2],[97,2],[33,1],[42,3],[42,3],[42,3],[42,3],[42,2],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,2],[42,5],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = new Arbol($$[$0-1]); console.log($$[$0-1]); return this.$;
break;
case 2:
this.$ = new Funcion($$[$0-2],$$[$0-1],$$[$0],null,this._$.first_line,this._$.first_column);
break;
case 3:
this.$ = new Funcion($$[$0-4],$$[$0-3],$$[$0],$$[$0-1],this._$.first_line,this._$.first_column);
break;
case 4: case 10: case 40: case 49: case 75: case 90: case 91: case 95: case 102: case 110: case 141:
this.$ = $$[$0-1];
break;
case 5: case 11: case 76: case 92: case 94: case 112:
this.$ = [];
break;
case 6:
 this.$ = $$[$0-1]; this.$ = agregar_vars($$[$0], this.$);
break;
case 7:
this.$ = []; this.$ = agregar_vars($$[$0], this.$);
break;
case 8:
this.$ = ["sent",$$[$0]];
break;
case 9:
this.$ = ["",$$[$0]];
break;
case 12: case 41:
 this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 13: case 18: case 20: case 21: case 22: case 23: case 24: case 25: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 42: case 70: case 72: case 78:
this.$ = [$$[$0]];
break;
case 14:
 this.$ = new Declaracion("let",null, $$[$0], null, this._$.first_line,this._$.first_column);
break;
case 15:
 this.$ = new Declaracion("let",$$[$0], $$[$0-2], null,this._$.first_line,this._$.first_column);
break;
case 16:
 this.$ = $$[$0-1]; this.$ = unir_listas($$[$0],this.$);
break;
case 17:
this.$ = []; this.$ = unir_listas($$[$0],this.$);
break;
case 19: case 52: case 84: case 97: case 99: case 100: case 140:
this.$ = $$[$0];
break;
case 26:
  this.$ = [$$[$0]];
break;
case 36:
this.$ = new Return(null, this._$.first_line,this._$.first_column);
break;
case 37:
this.$ = new Return($$[$0-1], this._$.first_line,this._$.first_column);
break;
case 38:
this.$ = new Break(this._$.first_line,this._$.first_column);
break;
case 39:
this.$ = new Continue(this._$.first_line,this._$.first_column);
break;
case 43:
this.$ = new Declaracion(tipo_dec,null, $$[$0], null, this._$.first_line,this._$.first_column);
break;
case 44:
 this.$ = new Declaracion(tipo_dec,null, $$[$0-2], $$[$0], this._$.first_line,this._$.first_column);
break;
case 45:
 this.$ = new Declaracion(tipo_dec,$$[$0], $$[$0-2], null,this._$.first_line,this._$.first_column);
break;
case 46:
 this.$ = new Declaracion(tipo_dec,$$[$0-2], $$[$0-4], $$[$0],this._$.first_line,this._$.first_column);
break;
case 47:
this.$ = $$[$0]; tipo_dec = $$[$0];
break;
case 48:
this.$ = $$[$0];tipo_dec = $$[$0];
break;
case 50:
this.$ =$$[$0-1];
break;
case 51:
this.$ = new Asignacion($$[$0-2],$$[$0],this._$.first_line,this._$.first_column);
break;
case 69: case 114:
this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 71:
this.$ = $$[$0-2]; this.$.push($$[$0-1]);
break;
case 73:
this.$ = [$$[$0-2], $$[$0]];
break;
case 74:
this.$ = new Switch($$[$0-1], $$[$0],this._$.first_line,this._$.first_column);
break;
case 77:
this.$ = $$[$0-1]; this.$.push($$[$0]);
break;
case 79:
this.$ = new Case($$[$0-2], $$[$0],this._$.first_line,this._$.first_column);
break;
case 80:
this.$ = new Case($$[$0-1], [],this._$.first_line,this._$.first_column);
break;
case 81:
this.$ = new Default($$[$0],this._$.first_line,this._$.first_column);
break;
case 82:
this.$ = new Default([],this._$.first_line,this._$.first_column);
break;
case 83: case 109:
 this.$ = $$[$0];
break;
case 85:
 this.$ = new If($$[$0-1], $$[$0], [],this._$.first_line,this._$.first_column);
break;
case 86:
this.$ = new If($$[$0-3], $$[$0-2], $$[$0],this._$.first_line,this._$.first_column);
break;
case 87:
 this.$ = new If($$[$0-3], $$[$0-2], [$$[$0]],this._$.first_line,this._$.first_column);
break;
case 88:
this.$ = new While($$[$0-1], $$[$0],this._$.first_line,this._$.first_column);
break;
case 89:
this.$ = new Do_while($$[$0-1], $$[$0-3], this._$.first_line,this._$.first_column);
break;
case 93:
this.$ = new For($$[$0-6],$$[$0-4],$$[$0-2],$$[$0], this._$.first_line,this._$.first_column);
break;
case 96:
$$[$0].tipo_declaracion = $$[$0-1]; this.$ = $$[$0];
break;
case 98:
this.$ = new For_1($$[$0-4], $$[$0-3], $$[$0-2], $$[$0], this._$.first_line,this._$.first_column);
break;
case 101:
this.$ = new Imprimir($$[$0-1], this._$.first_line, this._$.first_column);
break;
case 103:
this.$ = null;
break;
case 104:
 this.$ = new Tipo(tipos.NUMBER);
break;
case 105:
 this.$ = new Tipo(tipos.STRING);
break;
case 106:
 this.$ = new Tipo(tipos.VOID);
break;
case 107:
 this.$ = new Tipo(tipos.BOOLEAN);
break;
case 108:
 this.$ = new Tipo(tipos.ANY);
break;
case 111:
this.$ = new Llamada_funcion($$[$0-1],$$[$0], this._$.first_line,this._$.first_column);
break;
case 113:
this.$ = $$[$0-1]
break;
case 115:
 this.$ = [$$[$0]];
break;
case 116:
this.$ = new Aritmetica(new Identificador($$[$0-1],this._$.first_line, this._$.first_column),
                        new Primitivo(new Tipo(tipos.NUMBER), 1,this._$.first_line,this._$.first_column),"+",this._$.first_line,this._$.first_column);
break;
case 117:
this.$ = new Aritmetica(new Identificador($$[$0-1],this._$.first_line, this._$.first_column),
                        new Primitivo(new Tipo(tipos.NUMBER), 1,this._$.first_line,this._$.first_column),"-",this._$.first_line,this._$.first_column);
break;
case 118:
this.$ = new Asignacion($$[$0].nodo_izquierdo.id,$$[$0],this._$.first_line,this._$.first_column);
break;
case 119: case 120: case 121: case 122:
this.$ = new Aritmetica($$[$0-2],$$[$0],$$[$0-1], this._$.first_line, _$.first_column);
break;
case 124: case 125: case 126: case 127: case 128: case 129:
this.$ = new Relacional($$[$0-2],$$[$0],$$[$0-1],this._$.first_line,this._$.first_column);
break;
case 130: case 131:
this.$ = new Logica($$[$0-2],$$[$0],$$[$0-1],this._$.first_line,this._$.first_column);
break;
case 132:
this.$ = new Logica($$[$0],null,$$[$0-1],this._$.first_line,this._$.first_column);
break;
case 133:
 this.$ = new Ternario(new Tipo(tipos.BOOLEAN),$$[$0-4],$$[$0-2],$$[$0],this._$.first_line,this._$.first_column);
break;
case 134:
this.$ = new Primitivo(new Tipo(tipos.STRING), $$[$0].replace(/\"/g,"").replace(/\'/g,""),this._$.first_line, this._$.first_column);
break;
case 135:
this.$ = new Primitivo(new Tipo(tipos.NUMBER), Number($$[$0]),this._$.first_line, this._$.first_column);
break;
case 136: case 137:
this.$ = new Primitivo(new Tipo(tipos.BOOLEAN), $$[$0],this._$.first_line, this._$.first_column);
break;
case 138:
 this.$ = new Identificador($$[$0], this._$.first_line, this._$.first_column); 
break;
case 139:
this.$  = $$[$0];
break;
}
},
table: [{3:1,4:2,6:10,7:$V0,8:$V1,22:3,23:4,24:5,25:6,26:7,27:8,28:9,29:11,30:12,31:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:$V2,43:$V3,44:$V4,45:23,49:$V5,50:$V6,51:24,60:$V7,64:38,67:$V8,76:$V9,78:$Va,79:$Vb,80:$Vc,86:$Vd,94:29,97:32},{1:[3]},{5:[1,41],6:10,7:$V0,8:$V1,22:42,23:4,24:5,25:6,26:7,27:8,28:9,29:11,30:12,31:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:$V2,43:$V3,44:$V4,45:23,49:$V5,50:$V6,51:24,60:$V7,64:38,67:$V8,76:$V9,78:$Va,79:$Vb,80:$Vc,86:$Vd,94:29,97:32},o($Ve,[2,17]),o($Ve,[2,18]),o($Ve,[2,19]),o($Ve,[2,20]),o($Ve,[2,21]),o($Ve,[2,22]),o($Ve,[2,23]),o($Ve,[2,24]),o($Ve,[2,25]),o($Ve,[2,26]),o($Ve,[2,27]),o($Ve,[2,28]),o($Vf,[2,29]),o($Ve,[2,30]),o($Ve,[2,31]),o($Ve,[2,32]),o($Ve,[2,33]),o($Ve,[2,34]),o($Ve,[2,35]),{65:[1,43]},{8:[1,45],46:44,47:46},{41:[1,47]},{17:$Vg,68:48},{17:$Vg,68:50},{13:$Vh,75:51},{8:[1,53]},{41:[1,54]},{8:$Vi,17:$Vj,41:[1,55],42:56,94:64,97:65,101:$Vk,112:$Vl,114:$Vm,115:$Vn,116:$Vo,117:$Vp},{17:[1,67]},o([5,7,8,15,19,40,41,43,44,49,50,60,67,72,74,76,78,79,80,86],[2,118]),{17:$Vg,68:68},{41:[1,69]},{41:[1,70]},{8:[1,71]},{17:$Vq,48:[1,72],65:[2,70],95:73,98:$Vr,99:$Vs},{48:[1,77],65:[1,78]},{8:[2,47]},{8:[2,48]},{1:[2,1]},o($Ve,[2,16]),{87:[1,79]},{20:[1,81],41:[1,80]},o($Vt,$Vu,{11:[1,82],48:$Vv}),o($Vt,[2,42]),o($Vf,[2,49]),{13:$Vh,75:84},{8:$Vi,17:$Vj,42:85,94:64,97:65,101:$Vk,112:$Vl,114:$Vm,115:$Vn,116:$Vo,117:$Vp},{13:$Vh,75:86},{78:[1,87]},{4:88,6:10,7:$V0,8:$V1,15:[1,89],22:3,23:4,24:5,25:6,26:7,27:8,28:9,29:11,30:12,31:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:$V2,43:$V3,44:$V4,45:23,49:$V5,50:$V6,51:24,60:$V7,64:38,67:$V8,76:$V9,78:$Va,79:$Vb,80:$Vc,86:$Vd,94:29,97:32},{9:90,17:[1,91]},o($Ve,[2,110]),o($Ve,[2,36]),{41:[1,92],100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI},{8:$Vi,17:$Vj,42:106,94:64,97:65,101:$Vk,112:$Vl,114:$Vm,115:$Vn,116:$Vo,117:$Vp},{8:$Vi,17:$Vj,42:107,94:64,97:65,101:$Vk,112:$Vl,114:$Vm,115:$Vn,116:$Vo,117:$Vp},o($VJ,[2,134]),o($VJ,[2,135]),o($VJ,[2,136]),o($VJ,[2,137]),o($VJ,[2,138],{95:73,17:$Vq,98:$Vr,99:$Vs}),o($VJ,[2,139]),o($VJ,[2,140]),{8:$Vi,17:$Vj,42:108,94:64,97:65,101:$Vk,112:$Vl,114:$Vm,115:$Vn,116:$Vo,117:$Vp},{8:$VK,25:111,33:113,49:[1,110],51:24,81:109,97:32},{13:[1,115],69:114},o($Ve,[2,38]),o($Ve,[2,39]),{48:[1,116]},{8:$Vi,13:[1,117],17:$Vj,42:118,94:64,97:65,101:$Vk,112:$Vl,114:$Vm,115:$Vn,116:$Vo,117:$Vp},o($VJ,[2,111]),o($VL,[2,116]),o($VL,[2,117]),{8:$Vi,17:$Vj,19:[1,119],42:121,94:64,96:120,97:65,101:$Vk,112:$Vl,114:$Vm,115:$Vn,116:$Vo,117:$Vp},{8:$Vi,17:$Vj,42:122,94:64,97:65,101:$Vk,112:$Vl,114:$Vm,115:$Vn,116:$Vo,117:$Vp},{8:[1,123]},{17:[1,125],88:124},o($Ve,[2,40]),{8:[1,127],47:126},{8:$VM,12:128,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR},{8:$Vi,17:$Vj,42:135,94:64,97:65,101:$Vk,112:$Vl,114:$Vm,115:$Vn,116:$Vo,117:$Vp},o($Ve,[2,85],{77:[1,136]}),{19:[1,137],100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI},o($Ve,[2,88]),{17:$Vg,68:138},{6:10,7:$V0,8:$V1,15:[1,139],22:42,23:4,24:5,25:6,26:7,27:8,28:9,29:11,30:12,31:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:$V2,43:$V3,44:$V4,45:23,49:$V5,50:$V6,51:24,60:$V7,64:38,67:$V8,76:$V9,78:$Va,79:$Vb,80:$Vc,86:$Vd,94:29,97:32},o($VS,[2,92]),{10:140,11:[1,141],13:$VT},{8:$VU,18:143,19:[1,144],21:145},o($Ve,[2,37]),{8:$Vi,17:$Vj,42:147,94:64,97:65,101:$Vk,112:$Vl,114:$Vm,115:$Vn,116:$Vo,117:$Vp},{8:$Vi,17:$Vj,42:148,94:64,97:65,101:$Vk,112:$Vl,114:$Vm,115:$Vn,116:$Vo,117:$Vp},{8:$Vi,17:$Vj,42:149,94:64,97:65,101:$Vk,112:$Vl,114:$Vm,115:$Vn,116:$Vo,117:$Vp},{8:$Vi,17:$Vj,42:150,94:64,97:65,101:$Vk,112:$Vl,114:$Vm,115:$Vn,116:$Vo,117:$Vp},{8:$Vi,17:$Vj,42:151,94:64,97:65,101:$Vk,112:$Vl,114:$Vm,115:$Vn,116:$Vo,117:$Vp},{8:$Vi,17:$Vj,42:152,94:64,97:65,101:$Vk,112:$Vl,114:$Vm,115:$Vn,116:$Vo,117:$Vp},{8:$Vi,17:$Vj,42:153,94:64,97:65,101:$Vk,112:$Vl,114:$Vm,115:$Vn,116:$Vo,117:$Vp},{8:$Vi,17:$Vj,42:154,94:64,97:65,101:$Vk,112:$Vl,114:$Vm,115:$Vn,116:$Vo,117:$Vp},{8:$Vi,17:$Vj,42:155,94:64,97:65,101:$Vk,112:$Vl,114:$Vm,115:$Vn,116:$Vo,117:$Vp},{8:$Vi,17:$Vj,42:156,94:64,97:65,101:$Vk,112:$Vl,114:$Vm,115:$Vn,116:$Vo,117:$Vp},{8:$Vi,17:$Vj,42:157,94:64,97:65,101:$Vk,112:$Vl,114:$Vm,115:$Vn,116:$Vo,117:$Vp},{8:$Vi,17:$Vj,42:158,94:64,97:65,101:$Vk,112:$Vl,114:$Vm,115:$Vn,116:$Vo,117:$Vp},{8:$Vi,17:$Vj,42:159,94:64,97:65,101:$Vk,112:$Vl,114:$Vm,115:$Vn,116:$Vo,117:$Vp},o($VV,[2,123],{102:$Vy,103:$Vz}),o($VW,[2,132],{102:$Vy}),{19:[1,160],100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI},{41:[1,161]},{8:[1,162],47:163},{41:[2,97]},{48:[1,164],98:$Vr,99:$Vs},o($VX,[2,52]),o($Ve,[2,74]),{15:[1,166],70:165,71:167,72:$VY,74:$VZ},{13:[1,170]},{8:$V_,63:171,66:172},o($VX,[2,51],{100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI}),o($VJ,[2,112]),{19:[1,174],20:[1,175]},o($V$,[2,115],{100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI}),{41:[1,176],100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI},o([48,65],[2,69]),{41:[1,177]},{8:$Vi,17:$Vj,19:[1,179],42:178,94:64,97:65,101:$Vk,112:$Vl,114:$Vm,115:$Vn,116:$Vo,117:$Vp},o($Vt,[2,41]),o($Vt,$Vu,{11:$V01,48:$Vv}),o($Vt,$V11,{52:181,58:183,48:$V21,54:$V31}),o($V41,[2,104]),o($V41,[2,105]),o($V41,[2,106]),o($V41,[2,107]),o($V41,[2,108]),o([13,19,20,41,48,54],[2,109]),o($Vt,[2,44],{100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI}),{13:$Vh,26:186,75:185,76:$V9},o([13,41],[2,90]),{41:[1,187]},o($VS,[2,91]),o($Ve,[2,2]),{8:$VM,12:188,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR},{4:192,6:193,7:$V0,8:$V1,14:189,15:[1,190],16:191,22:3,23:4,24:5,25:6,26:7,27:8,28:9,29:11,30:12,31:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:$V2,43:$V3,44:$V4,45:23,49:$V5,50:$V6,51:24,60:$V7,64:38,67:$V8,76:$V9,78:$Va,79:$Vb,80:$Vc,86:$Vd,94:29,97:32},{19:[1,194],20:[1,195]},o($V51,[2,11]),o($V$,[2,13]),o($V$,[2,14],{11:[1,196]}),o($VV,[2,119],{102:$Vy,103:$Vz}),o($VV,[2,120],{102:$Vy,103:$Vz}),o($V61,[2,121],{100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI}),o($VW,[2,122],{102:$Vy}),o($V71,[2,124],{100:$Vw,101:$Vx,102:$Vy,103:$Vz}),o($V71,[2,125],{100:$Vw,101:$Vx,102:$Vy,103:$Vz}),o($V71,[2,126],{100:$Vw,101:$Vx,102:$Vy,103:$Vz}),o($V71,[2,127],{100:$Vw,101:$Vx,102:$Vy,103:$Vz}),o($V81,[2,128],{100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:$VC,107:$VD}),o($V81,[2,129],{100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:$VC,107:$VD}),o([11,15,19,20,41,56,110,111,113],[2,130],{100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:$VC,107:$VD,108:$VE,109:$VF}),o([11,15,19,20,41,56,111,113],[2,131],{100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG}),{11:[1,197],100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI},o($VJ,[2,141]),{8:$Vi,17:$Vj,42:198,94:64,97:65,101:$Vk,112:$Vl,114:$Vm,115:$Vn,116:$Vo,117:$Vp},{11:$V01,41:$Vu,48:$Vv,83:199,84:[1,200],85:[1,201]},{41:[2,96]},{8:$Vi,17:$Vj,42:118,94:64,97:65,101:$Vk,112:$Vl,114:$Vm,115:$Vn,116:$Vo,117:$Vp},{15:[1,202],71:203,72:$VY,74:$VZ},o($Ve,[2,76]),o($V91,[2,78]),{8:$Vi,17:$Vj,42:204,94:64,97:65,101:$Vk,112:$Vl,114:$Vm,115:$Vn,116:$Vo,117:$Vp},{11:[1,205]},{8:$Va1,61:206,62:207},{15:[1,209],20:[1,210]},o($Vb1,[2,72]),{11:[1,211]},o($VJ,[2,113]),{8:$Vi,17:$Vj,42:212,94:64,97:65,101:$Vk,112:$Vl,114:$Vm,115:$Vn,116:$Vo,117:$Vp},o($Ve,[2,68]),o($Ve,[2,101]),{19:[1,213],100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI},{41:[2,103]},{8:$VM,12:214,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR},{41:[1,215],48:[1,216],54:$V31,58:217},{8:$Vi,17:$Vj,42:218,94:64,97:65,101:$Vk,112:$Vl,114:$Vm,115:$Vn,116:$Vo,117:$Vp},o($Vc1,[2,60]),{59:$Vd1},o($Ve,[2,86]),o($Ve,[2,87]),o($Ve,[2,89]),{10:220,13:$VT},{4:192,6:193,7:$V0,8:$V1,15:[1,221],16:222,22:3,23:4,24:5,25:6,26:7,27:8,28:9,29:11,30:12,31:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:$V2,43:$V3,44:$V4,45:23,49:$V5,50:$V6,51:24,60:$V7,64:38,67:$V8,76:$V9,78:$Va,79:$Vb,80:$Vc,86:$Vd,94:29,97:32},o($Ve,[2,5]),o($Ve1,[2,7]),{6:10,7:$V0,8:$V1,15:[2,8],22:42,23:4,24:5,25:6,26:7,27:8,28:9,29:11,30:12,31:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:$V2,43:$V3,44:$V4,45:23,49:$V5,50:$V6,51:24,60:$V7,64:38,67:$V8,76:$V9,78:$Va,79:$Vb,80:$Vc,86:$Vd,94:29,97:32},o($Ve1,[2,9]),o($V51,[2,10]),{8:$VU,21:223},{8:$VM,12:224,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR},{8:$Vi,17:$Vj,42:225,94:64,97:65,101:$Vk,112:$Vl,114:$Vm,115:$Vn,116:$Vo,117:$Vp},{41:[1,226],100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI},{8:[1,227]},{8:[2,99]},{8:[2,100]},o($Ve,[2,75]),o($V91,[2,77]),{11:[1,228],100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI},o($V91,[2,82],{22:3,23:4,24:5,25:6,26:7,27:8,28:9,6:10,29:11,30:12,31:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,45:23,51:24,94:29,97:32,64:38,73:229,75:230,4:231,7:$V0,8:$V1,13:$Vh,40:$V2,43:$V3,44:$V4,49:$V5,50:$V6,60:$V7,67:$V8,76:$V9,78:$Va,79:$Vb,80:$Vc,86:$Vd}),{15:[1,232],20:[1,233]},o($Vb1,[2,64]),{11:[1,234]},{41:[1,235]},{8:$V_,66:236},{8:$Vi,17:$Vj,42:237,94:64,97:65,101:$Vk,112:$Vl,114:$Vm,115:$Vn,116:$Vo,117:$Vp},o($V$,[2,114],{100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI}),{41:[2,102]},o($Vt,$V11,{48:$V21}),o($Ve,[2,53]),{53:238,54:[1,239],58:240},o($Vc1,[2,59]),o($Vt,[2,46],{100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI}),o($Vc1,[2,61]),o($Ve,[2,3]),o($Ve,[2,4]),o($Ve1,[2,6]),o($V$,[2,12]),o($V$,[2,15]),o($V61,[2,133],{100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI}),{8:$VK,33:113,51:241,97:32},{19:[1,242]},o($V91,[2,80],{22:3,23:4,24:5,25:6,26:7,27:8,28:9,6:10,29:11,30:12,31:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,45:23,51:24,94:29,97:32,64:38,75:230,4:231,73:243,7:$V0,8:$V1,13:$Vh,40:$V2,43:$V3,44:$V4,49:$V5,50:$V6,60:$V7,67:$V8,76:$V9,78:$Va,79:$Vb,80:$Vc,86:$Vd}),o($V91,[2,81]),o($V91,[2,83]),o($V91,[2,84],{23:4,24:5,25:6,26:7,27:8,28:9,6:10,29:11,30:12,31:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,45:23,51:24,94:29,97:32,64:38,22:42,7:$V0,8:$V1,40:$V2,43:$V3,44:$V4,49:$V5,50:$V6,60:$V7,67:$V8,76:$V9,78:$Va,79:$Vb,80:$Vc,86:$Vd}),{41:[1,244]},{8:$Va1,62:245},{8:[1,247],12:246,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR},o($Ve,[2,67]),o($Vb1,[2,71]),o($Vb1,[2,73],{100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI}),{41:[1,248]},{8:$Vi,17:$Vj,42:250,55:249,59:$Vd1,94:64,97:65,101:$Vk,112:$Vl,114:$Vm,115:$Vn,116:$Vo,117:$Vp},{41:[2,56]},{19:[1,251]},{13:$Vf1,82:252},o($V91,[2,79]),o($Ve,[2,62]),o($Vb1,[2,63]),o($Vb1,[2,65]),o($Vb1,[2,66]),o($Ve,[2,54]),{20:[1,255],56:[1,254]},o($Vg1,[2,58],{100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI}),{13:$Vf1,82:256},o($Ve,[2,98]),{4:258,6:10,7:$V0,8:$V1,15:[1,257],22:3,23:4,24:5,25:6,26:7,27:8,28:9,29:11,30:12,31:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:$V2,43:$V3,44:$V4,45:23,49:$V5,50:$V6,51:24,60:$V7,64:38,67:$V8,76:$V9,78:$Va,79:$Vb,80:$Vc,86:$Vd,94:29,97:32},{57:[1,259]},{8:$Vi,17:$Vj,42:260,94:64,97:65,101:$Vk,112:$Vl,114:$Vm,115:$Vn,116:$Vo,117:$Vp},o($Ve,[2,93]),o($Ve,[2,94]),{6:10,7:$V0,8:$V1,15:[1,261],22:42,23:4,24:5,25:6,26:7,27:8,28:9,29:11,30:12,31:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:$V2,43:$V3,44:$V4,45:23,49:$V5,50:$V6,51:24,60:$V7,64:38,67:$V8,76:$V9,78:$Va,79:$Vb,80:$Vc,86:$Vd,94:29,97:32},{41:[2,55]},o($Vg1,[2,57],{100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI}),o($Ve,[2,95])],
defaultActions: {39:[2,47],40:[2,48],41:[2,1],111:[2,97],163:[2,96],179:[2,103],200:[2,99],201:[2,100],213:[2,102],240:[2,56],259:[2,55]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const {Imprimir} = require('./Instrucciones/Imprimir');
    const {Tipo, tipos} = require('./AST/Tipo'); 
    const {Arbol} = require('./AST/Arbol'); 
    const {Primitivo} = require('./Expresiones/Primitivo');
    const {Aritmetica} = require('./Expresiones/Aritmetica');
    const {Relacional} = require('./Expresiones/Relacional');
    const {Logica} = require('./Expresiones/Logica');
    const {Return} = require('./Expresiones/Return');
    const {Continue} = require('./Expresiones/Continue');
    const {Break} = require('./Expresiones/Break');

    const {Identificador} = require('./Instrucciones/Identificador');
    const {Declaracion} = require('./Instrucciones/Declaracion');
    const {Asignacion} = require('./Instrucciones/Asignacion');
    const {If} = require('./Instrucciones/If');
    const {While} = require('./Instrucciones/While');
    const {Do_while} = require('./Instrucciones/Do_while');
    const {Funcion} = require('./Instrucciones/Funcion');
    const {Llamada_funcion} = require('./Instrucciones/Llamada_funcion');
    const {Ternario} = require('./Instrucciones/Ternario');
    const {For} = require('./Instrucciones/For');
    const {Case} = require('./Instrucciones/Case');
    const {Default} = require('./Instrucciones/Default');
    const {Switch} = require('./Instrucciones/Switch');
    const {For_1} = require('./Instrucciones/For_1');
    
    let tipo_dec = "";
   
    function unir_listas(lista1, lista2){
        lista1.forEach(element => {
                lista2.push(element);  
        });
        return lista2;
    }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"ranges":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:this.begin('comment');
break;
case 2:this.popState();
break;
case 3:/* skip comment content*/
break;
case 4:/* skip whitespace */
break;
case 5:return 90;
break;
case 6:return 89;
break;
case 7:return 92;
break;
case 8:return 91;
break;
case 9:return 'TK_VAR';
break;
case 10:return 49;
break;
case 11:return 50;
break;
case 12:return 93;
break;
case 13:return 60;
break;
case 14:return 'TK_ARRAY';
break;
case 15:return 'TK_PUSH';
break;
case 16:return 'TK_POP';
break;
case 17:return 'TK_LENGTH';
break;
case 18:return 76;
break;
case 19:return 77;
break;
case 20:return 67;
break;
case 21:return 72;
break;
case 22:return 74;
break;
case 23:return 80;
break;
case 24:return 85;
break;
case 25:return 84;
break;
case 26:return 78;
break;
case 27:return 79;
break;
case 28:return 43;
break;
case 29:return 44;
break;
case 30:return 40;
break;
case 31:return 7;
break;
case 32:return 86;
break;
case 33:return 87;
break;
case 34:return 116;
break;
case 35:return 117;
break;
case 36:return 13; 
break;
case 37:return 15;
break;
case 38:return 17;
break;
case 39:return 19;
break;
case 40:return 54;
break;
case 41:return 59;
break;
case 42:return 20;
break;
case 43:return 113;
break;
case 44:return 11;
break;
case 45:return 41;
break;
case 46:return 107;
break;
case 47:return 105;
break;
case 48:return 108;
break;
case 49:return 106;
break;
case 50:return 104;
break;
case 51:return 109;
break;
case 52:return 111;
break;
case 53:return 110;
break;
case 54:return 112;
break;
case 55:return 48;
break;
case 56:return 'TK_MAS_IGUAL';
break;
case 57:return 'TK_MENOS_IGUAL';
break;
case 58:return 'TK_MULTI_IGUAL';
break;
case 59:return 'TK_DIV_IGUAL';
break;
case 60:return 'TK_MOD_IGUAL';
break;
case 61:return 98;
break;
case 62:return 100;
break;
case 63:return 99;
break;
case 64:return 101;
break;
case 65:return 102;
break;
case 66:return 103;
break;
case 67:return 'TK_MOD';
break;
case 68:return 'TK_ELEVADO';
break;
case 69:return 65;
break;
case 70:return 'TK_NULO';
break;
case 71:return 8; /* Varying form */
break;
case 72:return 115;
break;
case 73:return 115;
break;
case 74:return 114;
break;
case 75:return 114;
break;
case 76:return 114;
break;
case 77:return 114;
break;
case 78:return 5;
break;
case 79:
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\/\*)/,/^(?:\*\/)/,/^(?:.)/,/^(?:\s+)/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:var\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:any\b)/,/^(?:type\b)/,/^(?:Array\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:for\b)/,/^(?:of\b)/,/^(?:in\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:function\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:\?)/,/^(?::)/,/^(?:;)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:>=)/,/^(?:>)/,/^(?:!=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:=)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:--)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\^)/,/^(?:\.)/,/^(?:null\b)/,/^(?:[_a-zA-Z][a-zA-Z0-9_]*)/,/^(?:(((0|([1-9])([0-9])*))\.((0|([1-9])([0-9])*))+))/,/^(?:((0|([1-9])([0-9])*)))/,/^(?:"")/,/^(?:"([^"]|(\\.))*")/,/^(?:\\'\\')/,/^(?:\\'([^']|(\\.))*\\')/,/^(?:$)/,/^(?:.)/],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79],"inclusive":true},"INITIAL":{"rules":[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}