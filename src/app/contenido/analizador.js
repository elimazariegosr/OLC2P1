/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,41],$V1=[1,33],$V2=[1,37],$V3=[1,38],$V4=[1,42],$V5=[1,54],$V6=[1,55],$V7=[1,53],$V8=[1,46],$V9=[1,51],$Va=[1,50],$Vb=[1,47],$Vc=[1,48],$Vd=[1,49],$Ve=[1,52],$Vf=[2,5,45,46,47,127,136,137,139,145,147,148,149,150,153,154,155,159,178],$Vg=[1,60],$Vh=[1,61],$Vi=[1,62],$Vj=[1,77],$Vk=[1,75],$Vl=[1,76],$Vm=[1,73],$Vn=[1,74],$Vo=[1,83],$Vp=[14,162],$Vq=[2,59],$Vr=[1,93],$Vs=[2,5,14,45,46,47,106,120,127,130,136,137,139,145,147,148,149,150,153,154,155,156,157,159,176,177,178],$Vt=[14,131],$Vu=[2,5,14,45,46,47,127,136,137,139,145,147,148,149,150,153,154,155,159,178],$Vv=[1,109],$Vw=[1,105],$Vx=[1,107],$Vy=[1,108],$Vz=[14,162,178],$VA=[1,116],$VB=[1,115],$VC=[1,117],$VD=[1,118],$VE=[1,119],$VF=[1,120],$VG=[1,121],$VH=[1,122],$VI=[1,123],$VJ=[1,124],$VK=[1,125],$VL=[1,126],$VM=[1,127],$VN=[1,128],$VO=[1,129],$VP=[14,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,131,159,161,162,180],$VQ=[1,139],$VR=[2,50],$VS=[1,142],$VT=[1,149],$VU=[1,163],$VV=[1,170],$VW=[1,208],$VX=[1,207],$VY=[1,210],$VZ=[1,209],$V_=[1,211],$V$=[2,5,45,46,47,127,136,137,139,145,146,147,148,149,150,153,154,155,159,178],$V01=[1,233],$V11=[1,234],$V21=[128,169],$V31=[1,241],$V41=[131,162],$V51=[14,106,107,112,113,114,115,116,117,118,119,121,131,159,161,162,180],$V61=[14,106,107,108,109,111,112,113,114,115,116,117,118,119,121,131,159,161,162,180],$V71=[14,112,113,114,115,116,117,118,119,121,131,159,161,162,180],$V81=[14,116,117,118,119,121,131,159,161,162,180],$V91=[2,129],$Va1=[14,131,158,159,160,162,169],$Vb1=[158,180],$Vc1=[148,149,159],$Vd1=[14,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,131,159,160,161,162,169,180],$Ve1=[14,131,161,162],$Vf1=[161,162],$Vg1=[14,160,162,169],$Vh1=[2,45,46,47,127,136,137,139,145,147,150,153,154,155,159,178],$Vi1=[159,162];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"SENTENCIAS":4,"EOF":5,"FUNCION":6,"FUNCTION":7,"ID":8,"PARAMETROS":9,"CONT_FUNCION":10,"DOS_PUNTOS":11,"TIPO":12,"ERROR_SINTACTIO":13,"TK_P_COMA":14,"LL_ABRE":15,"LISTA_CONT_FUNCION":16,"LL_CIERRA":17,"CONT_BLOQUE_FUNCION":18,"P_ABRE":19,"LISTA_PARAMETROS":20,"P_CIERRA":21,"COMA":22,"PARAMETRO":23,"CONT_SENTENCIAS":24,"IMPRIMIR":25,"DECLARACION_VARIABLE":26,"ASiGNACION_VARIABLE":27,"SENTENCIA_IF":28,"SENTENCIA_WHILE":29,"SENTENCIA_DO_WHILE":30,"LLAMADA_FUNCION":31,"RETURN":32,"SENTENCIA_FOR":33,"SENTENCIA_FOR_1":34,"SENT_INC_DEC":35,"P_COMA":36,"SENTENCIA_SWITCH":37,"BREAK":38,"CONTINUE":39,"ARREGLO_PUSH":40,"ARREGLO_POP":41,"SD_ARREGLO":42,"DECLARACION_TYPE":43,"EXPRESION":44,"TK_RETURN":45,"TK_BREAK":46,"TK_CONTINUE":47,"TIPO_DECLARACION":48,"LISTA_DECLARACION":49,"DECLARACION":50,"IGUAL":51,"LISTA_ASIG_TYPE":52,"CONT_ARREGLO":53,"TIPO_ARREGLO":54,"LET":55,"CONST":56,"ASIGNACION":57,"LISTA_ID":58,"C_ABRE":59,"LISTA_CONT_ARREGLO":60,"C_CIERRA":61,"CONT_TIPO_ARREGLO":62,"PUNTO":63,"PUSH":64,"POP":65,"GD_ARREGLO":66,"LIST_D_ARREGLO":67,"TYPE":68,"LISTA_CONT_TYPE":69,"CONT_TYPE":70,"LISTA_ID_TYPE":71,"CONT_ASIG_TIPE":72,"SWITCH":73,"CONDICIONAL":74,"CONT_SWITCH":75,"LISTA_CASES":76,"CASES":77,"CASE":78,"CONT_CASE":79,"DEFAULT":80,"CONT_CONTROL":81,"IF":82,"ELSE":83,"WHILE":84,"DO":85,"FOR":86,"ASING_DEC_FOR":87,"CONT_FOR":88,"TIPO_FOR_1":89,"IN":90,"OF":91,"CONSOLE":92,"LOG":93,"CONT_IMPRIMIR":94,"NUMBER":95,"STRING":96,"VOID":97,"BOOLEAN":98,"ANY":99,"LLAMADA_FUNCION_EXP":100,"CONT_LLAMADA":101,"LISTA_CONT_LLAMADA":102,"INC_DEC":103,"MAS_MAS":104,"MENOS_MENOS":105,"TK_MENOS":106,"TK_MAS":107,"TK_MULTI":108,"TK_DIV":109,"TK_ELEVADO":110,"TK_MOD":111,"TK_MAYOR":112,"TK_MENOR":113,"TK_MAYOR_IGUAL":114,"TK_MENOR_IGUAL":115,"TK_IGUAL_IGUAL":116,"TK_DISTINTO":117,"TK_AND":118,"TK_OR":119,"TK_NOT":120,"TK_INTERROGACION":121,"CADENA":122,"NUMERO":123,"TRUE":124,"FALSE":125,"LENGTH":126,"TK_CONSOLE":127,"TK_PUNTO":128,"TK_LOG":129,"TK_P_ABRE":130,"TK_P_CIERRA":131,"TK_STRING":132,"TK_NUMBER":133,"TK_BOOLEAN":134,"TK_VOID":135,"TK_LET":136,"TK_CONST":137,"TK_ANY":138,"TK_TYPE":139,"ARRAY":140,"TK_ARRAY":141,"TK_PUSH":142,"TK_POP":143,"TK_LENGTH":144,"TK_IF":145,"TK_ELSE":146,"TK_SWITCH":147,"TK_CASE":148,"TK_DEFAULT":149,"TK_FOR":150,"TK_OF":151,"TK_IN":152,"TK_WHILE":153,"TK_DO":154,"TK_FUNCTION":155,"TK_TRUE":156,"TK_FALSE":157,"TK_LL_ABRE":158,"TK_LL_CIERRA":159,"TK_C_ABRE":160,"TK_C_CIERRA":161,"TK_COMA":162,"MENOR":163,"MAYOR":164,"DISTINTO":165,"OR":166,"AND":167,"NOT":168,"TK_IGUAL":169,"MENOS":170,"ELEVADO":171,"MULTI":172,"DIV":173,"MOD":174,"MAS":175,"TK_CADENA":176,"TK_NUMERO":177,"TK_ID":178,"INTERROGACION":179,"TK_DOS_PUNTOS":180,"MENOR_IGUAL":181,"IGUAL_IGUAL":182,"MAYOR_IGUAL":183,"TK_MAS_MAS":184,"TK_MENOS_MENOS":185,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:"TK_P_COMA",45:"TK_RETURN",46:"TK_BREAK",47:"TK_CONTINUE",106:"TK_MENOS",107:"TK_MAS",108:"TK_MULTI",109:"TK_DIV",110:"TK_ELEVADO",111:"TK_MOD",112:"TK_MAYOR",113:"TK_MENOR",114:"TK_MAYOR_IGUAL",115:"TK_MENOR_IGUAL",116:"TK_IGUAL_IGUAL",117:"TK_DISTINTO",118:"TK_AND",119:"TK_OR",120:"TK_NOT",121:"TK_INTERROGACION",127:"TK_CONSOLE",128:"TK_PUNTO",129:"TK_LOG",130:"TK_P_ABRE",131:"TK_P_CIERRA",132:"TK_STRING",133:"TK_NUMBER",134:"TK_BOOLEAN",135:"TK_VOID",136:"TK_LET",137:"TK_CONST",138:"TK_ANY",139:"TK_TYPE",141:"TK_ARRAY",142:"TK_PUSH",143:"TK_POP",144:"TK_LENGTH",145:"TK_IF",146:"TK_ELSE",147:"TK_SWITCH",148:"TK_CASE",149:"TK_DEFAULT",150:"TK_FOR",151:"TK_OF",152:"TK_IN",153:"TK_WHILE",154:"TK_DO",155:"TK_FUNCTION",156:"TK_TRUE",157:"TK_FALSE",158:"TK_LL_ABRE",159:"TK_LL_CIERRA",160:"TK_C_ABRE",161:"TK_C_CIERRA",162:"TK_COMA",169:"TK_IGUAL",176:"TK_CADENA",177:"TK_NUMERO",178:"TK_ID",180:"TK_DOS_PUNTOS",184:"TK_MAS_MAS",185:"TK_MENOS_MENOS"},
productions_: [0,[3,2],[3,1],[6,4],[6,6],[13,2],[10,3],[10,2],[16,2],[16,1],[18,1],[18,1],[9,3],[9,2],[20,3],[20,1],[23,1],[23,3],[4,2],[4,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,2],[24,1],[24,1],[24,1],[24,1],[24,2],[24,1],[24,1],[24,1],[32,2],[32,3],[32,1],[38,2],[38,1],[39,2],[39,1],[26,3],[49,3],[49,1],[50,1],[50,3],[50,3],[50,5],[50,7],[50,3],[50,5],[50,6],[50,4],[50,0],[48,1],[48,1],[27,2],[27,2],[57,3],[57,1],[57,3],[53,3],[53,2],[53,1],[60,3],[60,1],[54,2],[54,1],[62,2],[40,7],[40,7],[41,5],[66,2],[42,5],[42,5],[67,4],[67,3],[43,7],[69,3],[69,1],[70,3],[58,3],[58,3],[71,3],[71,1],[52,3],[52,1],[72,3],[37,3],[75,3],[75,2],[76,2],[76,1],[77,4],[77,3],[77,3],[77,2],[79,1],[79,1],[28,3],[28,5],[28,5],[29,3],[30,5],[74,3],[81,3],[81,2],[33,9],[88,2],[88,3],[87,2],[87,1],[34,8],[89,1],[89,1],[25,5],[94,3],[94,2],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[31,2],[100,2],[101,2],[101,3],[102,3],[102,1],[103,2],[103,2],[35,1],[44,2],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,2],[44,5],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,3],[44,1],[44,1],[44,3],[44,3],[92,1],[63,1],[93,1],[19,1],[21,1],[96,1],[95,1],[98,1],[97,1],[55,1],[56,1],[99,1],[68,1],[140,1],[64,1],[65,1],[126,1],[82,1],[83,1],[73,1],[78,1],[80,1],[86,1],[91,1],[90,1],[84,1],[85,1],[7,1],[124,1],[125,1],[15,1],[17,1],[59,1],[61,1],[22,1],[163,1],[36,1],[164,1],[165,1],[166,1],[167,1],[168,1],[51,1],[170,1],[171,1],[172,1],[173,1],[174,1],[175,1],[122,1],[123,1],[8,1],[179,1],[11,1],[181,1],[182,1],[183,1],[104,1],[105,1],[105,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = new Arbol($$[$0-1], errores); return this.$;
break;
case 2:
this.$ = new Arbol([],errores); return this.$;
break;
case 3:
this.$ = new Funcion($$[$0-2],$$[$0-1],$$[$0],null,this._$.first_line,this._$.first_column);
break;
case 4:
this.$ = new Funcion($$[$0-4],$$[$0-3],$$[$0],$$[$0-1],this._$.first_line,this._$.first_column);
break;
case 5:

                        errores.push(new Errror("Sintactico", "Se encontro un error cerca del token: "
                        + token_error ,f_error, c_error));
break;
case 6: case 12: case 47: case 62: case 67: case 95: case 110: case 111: case 115: case 122: case 130: case 167:
this.$ = $$[$0-1];
break;
case 7: case 13: case 68: case 96: case 112: case 114: case 132:
this.$ = [];
break;
case 8:
 this.$ = $$[$0-1]; this.$ = unir_listas($$[$0], this.$);
break;
case 9:
this.$ = []; this.$ = unir_listas($$[$0], this.$);
break;
case 10: case 21: case 65: case 69: case 73: case 104: case 117: case 119: case 120: case 162: case 164: case 165:
this.$ = $$[$0];
break;
case 11: case 15: case 20: case 22: case 23: case 24: case 25: case 26: case 27: case 29: case 30: case 32: case 33: case 34: case 35: case 37: case 38: case 49: case 85: case 90: case 92: case 98:
this.$ = [$$[$0]];
break;
case 14: case 48:
 this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 16:
 this.$ = new Declaracion("let",null, $$[$0], null, this._$.first_line,this._$.first_column);
break;
case 17:
 this.$ = new Declaracion("let",$$[$0], $$[$0-2], null,this._$.first_line,this._$.first_column);
break;
case 18:
 this.$ = $$[$0-1]; this.$ = unir_listas($$[$0],this.$);
break;
case 19:
this.$ = []; this.$ = unir_listas($$[$0],this.$);
break;
case 28:
  this.$ = [$$[$0]];
break;
case 31: case 36: case 82:
this.$ = [$$[$0-1]];
break;
case 39:
this.$  = [];
break;
case 40:
this.$ = new Return(null, this._$.first_line,this._$.first_column);
break;
case 41:
this.$ = new Return($$[$0-1], this._$.first_line,this._$.first_column);
break;
case 42: case 44: case 46: case 168: case 169: case 170: case 171: case 172: case 173: case 174: case 175: case 176: case 177: case 178: case 179: case 180: case 181: case 182: case 183: case 184: case 185: case 186: case 187: case 188: case 189: case 190: case 191: case 192: case 193: case 194: case 195: case 196: case 197: case 198: case 199: case 200: case 201: case 202: case 203: case 204: case 205: case 206: case 207: case 208: case 209: case 210: case 211: case 212: case 213: case 214: case 215: case 216: case 217: case 218: case 219: case 220: case 221: case 222: case 223: case 224: case 225: case 226:
this.$ = $$[$0]; token_error = $$[$0];f_error = this._$.first_line; c_error = this._$.first_column;
break;
case 43:
this.$ = new Break(this._$.first_line,this._$.first_column);
break;
case 45:
this.$ = new Continue(this._$.first_line,this._$.first_column);
break;
case 50:
this.$ = new Declaracion(tipo_dec,null, $$[$0], null, this._$.first_line,this._$.first_column);
break;
case 51:
 this.$ = new Declaracion(tipo_dec,null, $$[$0-2], $$[$0], this._$.first_line,this._$.first_column);
break;
case 52:
 this.$ = new Declaracion(tipo_dec,$$[$0], $$[$0-2], null,this._$.first_line,this._$.first_column);
break;
case 53:
 this.$ = new Declaracion(tipo_dec,$$[$0-2], $$[$0-4], $$[$0],this._$.first_line,this._$.first_column);
break;
case 54:
this.$ = new Type_object($$[$0-6], $$[$0-4], $$[$0-1],0,0);
break;
case 55:
this.$ = new Arreglo($$[$0-2],null, $$[$0], 0,0,0);
break;
case 56:
this.$ = new Arreglo($$[$0-4],$$[$0-2], $$[$0], 0,0,0);
break;
case 57:
this.$ = new Arreglo($$[$0-5],$$[$0-3], $$[$0], $$[$0-2],0,0);
break;
case 58:
this.$ = new Arreglo($$[$0-3],$$[$0-1], [], $$[$0],0,0);
break;
case 60:
this.$ = $$[$0]; tipo_dec = $$[$0];
break;
case 61:
this.$ = $$[$0];tipo_dec = $$[$0];
break;
case 63:
this.$ =$$[$0-1];
break;
case 64:
this.$ = new Asignacion($$[$0-2],$$[$0],this._$.first_line,this._$.first_column);
break;
case 66:
this.$ = new Set_type($$[$0-2], $$[$0], 0, 0);
break;
case 70: case 84: case 87: case 89: case 91: case 134:
this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 71:
this.$= [$$[$0]];
break;
case 72:
this.$ = $$[$0-1]; this.$ += $$[$0];
break;
case 74:
this.$ = 1;
break;
case 75: case 76:
this.$ = new Push($$[$0-6], $$[$0-2], 0,0);
break;
case 77:
this.$ = new Pop($$[$0-4], 0,0);
break;
case 78:
this.$ = new GD_Arreglo($$[$0-1], $$[$0],0,0);
break;
case 79: case 80:
this.$ = new SD_Arreglo($$[$0-4], $$[$0-3], $$[$0-1],0,0);
break;
case 81:
this.$ = $$[$0-3]; this.$.push($$[$0-1]);
break;
case 83:
this.$ = new Typo($$[$0-5],$$[$0-2],0,0);
break;
case 86: case 93:
this.$ = [$$[$0-2], $$[$0]];
break;
case 88:
this.$ = [$$[$0-2],$$[$0]];
break;
case 94:
this.$ = new Switch($$[$0-1], $$[$0],this._$.first_line,this._$.first_column);
break;
case 97:
this.$ = $$[$0-1]; this.$.push($$[$0]);
break;
case 99:
this.$ = new Case($$[$0-2], $$[$0],this._$.first_line,this._$.first_column);
break;
case 100:
this.$ = new Case($$[$0-1], [],this._$.first_line,this._$.first_column);
break;
case 101:
this.$ = new Default($$[$0],this._$.first_line,this._$.first_column);
break;
case 102:
this.$ = new Default([],this._$.first_line,this._$.first_column);
break;
case 103: case 129:
 this.$ = $$[$0];
break;
case 105:
 this.$ = new If($$[$0-1], $$[$0], [],this._$.first_line,this._$.first_column);
break;
case 106:
this.$ = new If($$[$0-3], $$[$0-2], $$[$0],this._$.first_line,this._$.first_column);
break;
case 107:
 this.$ = new If($$[$0-3], $$[$0-2], [$$[$0]],this._$.first_line,this._$.first_column);
break;
case 108:
this.$ = new While($$[$0-1], $$[$0],this._$.first_line,this._$.first_column);
break;
case 109:
this.$ = new Do_while($$[$0-1], $$[$0-3], this._$.first_line,this._$.first_column);
break;
case 113:
this.$ = new For($$[$0-6],$$[$0-4],$$[$0-2],$$[$0], this._$.first_line,this._$.first_column);
break;
case 116:
$$[$0].tipo_declaracion = $$[$0-1]; this.$ = $$[$0];
break;
case 118:
this.$ = new For_1($$[$0-4], $$[$0-3], $$[$0-2], $$[$0], this._$.first_line,this._$.first_column);
break;
case 121:
this.$ = new Imprimir($$[$0-1], this._$.first_line, this._$.first_column);
break;
case 123:
this.$ = null;
break;
case 124:
 this.$ = new Tipo(tipos.NUMBER);
break;
case 125:
 this.$ = new Tipo(tipos.STRING);
break;
case 126:
 this.$ = new Tipo(tipos.VOID);
break;
case 127:
 this.$ = new Tipo(tipos.BOOLEAN);
break;
case 128:
 this.$ = new Tipo(tipos.ANY);
break;
case 131:
this.$ = new Llamada_funcion($$[$0-1],$$[$0], this._$.first_line,this._$.first_column);
break;
case 133:
this.$ = $$[$0-1]
break;
case 135:
 this.$ = [$$[$0]];
break;
case 136:
this.$ = new Aritmetica(new Identificador($$[$0-1],this._$.first_line, this._$.first_column),
                        new Primitivo(new Tipo(tipos.NUMBER), 1,this._$.first_line,this._$.first_column),"+",this._$.first_line,this._$.first_column);
break;
case 137:
this.$ = new Aritmetica(new Identificador($$[$0-1],this._$.first_line, this._$.first_column),
                        new Primitivo(new Tipo(tipos.NUMBER), 1,this._$.first_line,this._$.first_column),"-",this._$.first_line,this._$.first_column);
break;
case 138:
this.$ = new Asignacion($$[$0].nodo_izquierdo.id,$$[$0],this._$.first_line,this._$.first_column);
break;
case 139:
this.$ = new Aritmetica($$[$0],null,$$[$0-1], this._$.first_line, this._$.first_column);
break;
case 140: case 141: case 142: case 143: case 144: case 145:
this.$ = new Aritmetica($$[$0-2],$$[$0],$$[$0-1], this._$.first_line, this._$.first_column);
break;
case 146: case 147: case 148: case 149: case 150: case 151:
this.$ = new Relacional($$[$0-2],$$[$0],$$[$0-1],this._$.first_line,this._$.first_column);
break;
case 152: case 153:
this.$ = new Logica($$[$0-2],$$[$0],$$[$0-1],this._$.first_line,this._$.first_column);
break;
case 154:
this.$ = new Logica($$[$0],null,$$[$0-1],this._$.first_line,this._$.first_column);
break;
case 155:
 this.$ = new Ternario(new Tipo(tipos.BOOLEAN),$$[$0-4],$$[$0-2],$$[$0],this._$.first_line,this._$.first_column);
break;
case 156:
this.$ = new Primitivo(new Tipo(tipos.STRING), $$[$0].replace(/\"/g,"").replace(/\'/g,""),this._$.first_line, this._$.first_column);
break;
case 157:
this.$ = new Primitivo(new Tipo(tipos.NUMBER), Number($$[$0]),this._$.first_line, this._$.first_column);
break;
case 158: case 159:
this.$ = new Primitivo(new Tipo(tipos.BOOLEAN), $$[$0],this._$.first_line, this._$.first_column);
break;
case 160:
 this.$ = new Identificador($$[$0], this._$.first_line, this._$.first_column); 
break;
case 161:
this.$  = $$[$0];
break;
case 163:
this.$ = new Llamada_type($$[$0-2], $$[$0],0,0);
break;
case 166:
this.$ = new Length($$[$0-2],0,0);
break;
case 227:
this.$ = $$[$0]; token_error = $$[$0]; f_error = this._$.first_line; c_error = this._$.first_column;
break;
}
},
table: [{2:$V0,3:1,4:2,5:[1,3],6:11,7:31,8:39,13:24,24:4,25:5,26:6,27:7,28:8,29:9,30:10,31:12,32:13,33:14,34:15,35:16,37:17,38:18,39:19,40:20,41:21,42:22,43:23,45:$V1,46:$V2,47:$V3,48:26,55:43,56:44,57:27,58:45,68:40,73:36,82:28,84:29,85:30,86:34,92:25,100:32,103:35,127:$V4,136:$V5,137:$V6,139:$V7,145:$V8,147:$V9,150:$Va,153:$Vb,154:$Vc,155:$Vd,178:$Ve},{1:[3]},{2:$V0,5:[1,56],6:11,7:31,8:39,13:24,24:57,25:5,26:6,27:7,28:8,29:9,30:10,31:12,32:13,33:14,34:15,35:16,37:17,38:18,39:19,40:20,41:21,42:22,43:23,45:$V1,46:$V2,47:$V3,48:26,55:43,56:44,57:27,58:45,68:40,73:36,82:28,84:29,85:30,86:34,92:25,100:32,103:35,127:$V4,136:$V5,137:$V6,139:$V7,145:$V8,147:$V9,150:$Va,153:$Vb,154:$Vc,155:$Vd,178:$Ve},{1:[2,2]},o($Vf,[2,19]),o($Vf,[2,20]),o($Vf,[2,21]),o($Vf,[2,22]),o($Vf,[2,23]),o($Vf,[2,24]),o($Vf,[2,25]),o($Vf,[2,26]),o($Vf,[2,27]),o([2,5,45,46,47,127,136,137,139,145,147,148,149,150,153,154,155,159],[2,28],{36:58,44:59,122:63,123:64,124:65,125:66,8:67,100:68,103:69,41:70,66:71,19:72,14:$Vg,106:$Vh,120:$Vi,130:$Vj,156:$Vk,157:$Vl,176:$Vm,177:$Vn,178:$Ve}),o($Vf,[2,29]),o($Vf,[2,30]),{14:$Vg,36:78},o($Vf,[2,32]),o($Vf,[2,33],{36:79,14:$Vg}),o($Vf,[2,34],{36:80,14:$Vg}),o($Vf,[2,35]),{14:$Vg,36:81},o($Vf,[2,37]),o($Vf,[2,38]),o($Vf,[2,39]),{63:82,128:$Vo},o($Vp,$Vq,{49:84,50:85,8:86,178:$Ve}),{14:$Vg,36:87},{19:89,74:88,130:$Vj},{19:89,74:90,130:$Vj},{15:92,81:91,158:$Vr},{8:94,178:$Ve},{14:$Vg,36:95},o($Vs,[2,42]),{19:96,130:$Vj},o($Vt,[2,138]),{19:89,74:97,130:$Vj},o($Vu,[2,44]),o($Vu,[2,46]),{19:106,51:100,59:104,63:98,67:99,101:101,104:102,105:103,128:$Vo,130:$Vj,160:$Vv,169:$Vw,184:$Vx,185:$Vy},{8:110,178:$Ve},{14:[1,111]},{128:[2,168]},o($Vz,[2,60]),o($Vz,[2,61]),{51:112,63:113,128:$Vo,169:$Vw},{130:[2,185]},{130:[2,193]},{158:[2,194]},{178:[2,195]},{130:[2,190]},{130:[2,187]},o([14,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,128,130,131,151,152,158,159,160,161,162,169,180,184,185],[2,219]),{178:[2,180]},o($Vz,[2,177]),o($Vz,[2,178]),{1:[2,1]},o($Vf,[2,18]),o($Vs,[2,40]),{14:$Vg,36:114,106:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF,112:$VG,113:$VH,114:$VI,115:$VJ,116:$VK,117:$VL,118:$VM,119:$VN,121:$VO},o($Vs,[2,204]),{8:67,19:72,41:70,44:130,66:71,100:68,103:69,106:$Vh,120:$Vi,122:63,123:64,124:65,125:66,130:$Vj,156:$Vk,157:$Vl,176:$Vm,177:$Vn,178:$Ve},{8:67,19:72,41:70,44:131,66:71,100:68,103:69,106:$Vh,120:$Vi,122:63,123:64,124:65,125:66,130:$Vj,156:$Vk,157:$Vl,176:$Vm,177:$Vn,178:$Ve},o($VP,[2,156]),o($VP,[2,157]),o($VP,[2,158]),o($VP,[2,159]),o($VP,[2,160],{101:101,104:102,105:103,59:104,19:106,63:132,67:133,128:$Vo,130:$Vj,160:$Vv,184:$Vx,185:$Vy}),o($VP,[2,161]),o($VP,[2,162]),o($VP,[2,164]),o($VP,[2,165]),{8:67,19:72,41:70,44:134,66:71,100:68,103:69,106:$Vh,120:$Vi,122:63,123:64,124:65,125:66,130:$Vj,156:$Vk,157:$Vl,176:$Vm,177:$Vn,178:$Ve},o($VP,[2,217]),o($VP,[2,218]),o($VP,[2,196]),o($VP,[2,197]),o([106,120,130,131,136,156,157,160,176,177,178],[2,171]),o($Vf,[2,31]),o($Vu,[2,43]),o($Vu,[2,45]),o($Vf,[2,36]),{93:135,129:[1,136]},o([129,142,143,144,178],[2,169]),{14:$Vg,22:138,36:137,162:$VQ},o($Vp,[2,49]),o($Vp,$VR,{51:140,11:141,169:$Vw,180:$VS}),o($Vu,[2,62]),{15:92,81:143,158:$Vr},{8:67,19:72,41:70,44:144,66:71,100:68,103:69,106:$Vh,120:$Vi,122:63,123:64,124:65,125:66,130:$Vj,156:$Vk,157:$Vl,176:$Vm,177:$Vn,178:$Ve},{15:92,81:145,158:$Vr},{84:146,153:$Vb},{2:$V0,4:147,6:11,7:31,8:39,13:24,17:148,24:4,25:5,26:6,27:7,28:8,29:9,30:10,31:12,32:13,33:14,34:15,35:16,37:17,38:18,39:19,40:20,41:21,42:22,43:23,45:$V1,46:$V2,47:$V3,48:26,55:43,56:44,57:27,58:45,68:40,73:36,82:28,84:29,85:30,86:34,92:25,100:32,103:35,127:$V4,136:$V5,137:$V6,139:$V7,145:$V8,147:$V9,150:$Va,153:$Vb,154:$Vc,155:$Vd,159:$VT,178:$Ve},o([2,45,46,47,127,136,137,139,145,147,148,149,150,153,154,155,159,178],[2,198]),{9:150,19:151,130:$Vj},o($Vf,[2,130]),{8:155,27:154,35:156,55:153,57:27,58:45,87:152,103:35,136:$V5,178:$Ve},{15:158,75:157,158:$Vr},{8:161,64:159,65:160,142:[1,162],143:$VU,178:$Ve},{51:164,59:165,160:$Vv,169:$Vw},{8:67,19:72,41:70,44:166,66:71,100:68,103:69,106:$Vh,120:$Vi,122:63,123:64,124:65,125:66,130:$Vj,156:$Vk,157:$Vl,176:$Vm,177:$Vn,178:$Ve},o($VP,[2,131]),o($VP,[2,136]),o($VP,[2,137]),{8:67,19:72,41:70,44:167,66:71,100:68,103:69,106:$Vh,120:$Vi,122:63,123:64,124:65,125:66,130:$Vj,156:$Vk,157:$Vl,176:$Vm,177:$Vn,178:$Ve},o([106,120,130,156,157,158,160,176,177,178],[2,210]),{8:67,19:72,21:168,41:70,44:171,66:71,100:68,102:169,103:69,106:$Vh,120:$Vi,122:63,123:64,124:65,125:66,130:$Vj,131:$VV,156:$Vk,157:$Vl,176:$Vm,177:$Vn,178:$Ve},o($VP,[2,225]),o($VP,[2,226]),o([106,120,130,156,157,160,161,176,177,178],[2,200]),{51:172,169:$Vw},o($Vf,[2,5]),{8:67,19:72,41:70,44:173,66:71,100:68,103:69,106:$Vh,120:$Vi,122:63,123:64,124:65,125:66,130:$Vj,156:$Vk,157:$Vl,176:$Vm,177:$Vn,178:$Ve},{8:174,178:$Ve},o($Vs,[2,41]),{8:67,19:72,41:70,44:175,66:71,100:68,103:69,106:$Vh,120:$Vi,122:63,123:64,124:65,125:66,130:$Vj,156:$Vk,157:$Vl,176:$Vm,177:$Vn,178:$Ve},{8:67,19:72,41:70,44:176,66:71,100:68,103:69,106:$Vh,120:$Vi,122:63,123:64,124:65,125:66,130:$Vj,156:$Vk,157:$Vl,176:$Vm,177:$Vn,178:$Ve},{8:67,19:72,41:70,44:177,66:71,100:68,103:69,106:$Vh,120:$Vi,122:63,123:64,124:65,125:66,130:$Vj,156:$Vk,157:$Vl,176:$Vm,177:$Vn,178:$Ve},{8:67,19:72,41:70,44:178,66:71,100:68,103:69,106:$Vh,120:$Vi,122:63,123:64,124:65,125:66,130:$Vj,156:$Vk,157:$Vl,176:$Vm,177:$Vn,178:$Ve},{8:67,19:72,41:70,44:179,66:71,100:68,103:69,106:$Vh,120:$Vi,122:63,123:64,124:65,125:66,130:$Vj,156:$Vk,157:$Vl,176:$Vm,177:$Vn,178:$Ve},{8:67,19:72,41:70,44:180,66:71,100:68,103:69,106:$Vh,120:$Vi,122:63,123:64,124:65,125:66,130:$Vj,156:$Vk,157:$Vl,176:$Vm,177:$Vn,178:$Ve},{8:67,19:72,41:70,44:181,66:71,100:68,103:69,106:$Vh,120:$Vi,122:63,123:64,124:65,125:66,130:$Vj,156:$Vk,157:$Vl,176:$Vm,177:$Vn,178:$Ve},{8:67,19:72,41:70,44:182,66:71,100:68,103:69,106:$Vh,120:$Vi,122:63,123:64,124:65,125:66,130:$Vj,156:$Vk,157:$Vl,176:$Vm,177:$Vn,178:$Ve},{8:67,19:72,41:70,44:183,66:71,100:68,103:69,106:$Vh,120:$Vi,122:63,123:64,124:65,125:66,130:$Vj,156:$Vk,157:$Vl,176:$Vm,177:$Vn,178:$Ve},{8:67,19:72,41:70,44:184,66:71,100:68,103:69,106:$Vh,120:$Vi,122:63,123:64,124:65,125:66,130:$Vj,156:$Vk,157:$Vl,176:$Vm,177:$Vn,178:$Ve},{8:67,19:72,41:70,44:185,66:71,100:68,103:69,106:$Vh,120:$Vi,122:63,123:64,124:65,125:66,130:$Vj,156:$Vk,157:$Vl,176:$Vm,177:$Vn,178:$Ve},{8:67,19:72,41:70,44:186,66:71,100:68,103:69,106:$Vh,120:$Vi,122:63,123:64,124:65,125:66,130:$Vj,156:$Vk,157:$Vl,176:$Vm,177:$Vn,178:$Ve},{8:67,19:72,41:70,44:187,66:71,100:68,103:69,106:$Vh,120:$Vi,122:63,123:64,124:65,125:66,130:$Vj,156:$Vk,157:$Vl,176:$Vm,177:$Vn,178:$Ve},{8:67,19:72,41:70,44:188,66:71,100:68,103:69,106:$Vh,120:$Vi,122:63,123:64,124:65,125:66,130:$Vj,156:$Vk,157:$Vl,176:$Vm,177:$Vn,178:$Ve},{8:67,19:72,41:70,44:189,66:71,100:68,103:69,106:$Vh,120:$Vi,122:63,123:64,124:65,125:66,130:$Vj,156:$Vk,157:$Vl,176:$Vm,177:$Vn,178:$Ve},o($VP,[2,139]),o($VP,[2,154]),{8:190,65:160,126:191,143:$VU,144:[1,192],178:$Ve},o($VP,[2,78],{59:165,160:$Vv}),{21:193,106:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF,112:$VG,113:$VH,114:$VI,115:$VJ,116:$VK,117:$VL,118:$VM,119:$VN,121:$VO,131:$VV},{19:195,94:194,130:$Vj},{130:[2,170]},o($Vf,[2,47]),o($Vp,$Vq,{8:86,50:196,178:$Ve}),o([14,106,120,130,156,157,160,162,176,177,178],[2,202]),{8:67,19:72,41:70,44:197,53:198,59:199,66:71,100:68,103:69,106:$Vh,120:$Vi,122:63,123:64,124:65,125:66,130:$Vj,156:$Vk,157:$Vl,160:$Vv,176:$Vm,177:$Vn,178:$Ve},{8:201,12:200,95:202,96:203,97:204,98:205,99:206,132:$VW,133:$VX,134:$VY,135:$VZ,138:$V_,178:$Ve},o([2,45,46,47,106,120,127,130,132,133,134,135,136,137,138,139,145,147,148,149,150,153,154,155,156,157,158,159,176,177,178],[2,221]),o($Vf,[2,105],{83:212,146:[1,213]}),{21:214,106:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF,112:$VG,113:$VH,114:$VI,115:$VJ,116:$VK,117:$VL,118:$VM,119:$VN,121:$VO,131:$VV},o($Vf,[2,108]),{19:89,74:215,130:$Vj},{2:$V0,6:11,7:31,8:39,13:24,17:216,24:57,25:5,26:6,27:7,28:8,29:9,30:10,31:12,32:13,33:14,34:15,35:16,37:17,38:18,39:19,40:20,41:21,42:22,43:23,45:$V1,46:$V2,47:$V3,48:26,55:43,56:44,57:27,58:45,68:40,73:36,82:28,84:29,85:30,86:34,92:25,100:32,103:35,127:$V4,136:$V5,137:$V6,139:$V7,145:$V8,147:$V9,150:$Va,153:$Vb,154:$Vc,155:$Vd,159:$VT,178:$Ve},o($V$,[2,112]),o([2,5,14,45,46,47,127,136,137,139,145,146,147,148,149,150,153,154,155,159,162,178],[2,199]),{10:217,11:218,15:219,158:$Vr,180:$VS},{8:223,20:220,21:221,23:222,131:$VV,178:$Ve},{14:$Vg,36:224},{8:225,14:$Vq,50:226,178:$Ve},{14:[2,117]},{51:100,63:227,104:102,105:103,128:$Vo,169:$Vw,184:$Vx,185:$Vy},o($Vt,[2,65]),o($Vf,[2,94]),{17:229,76:228,77:230,78:231,80:232,148:$V01,149:$V11,159:$VT},{19:235,130:$Vj},{19:236,130:$Vj},o($V21,[2,88]),{130:[2,182]},{130:[2,183]},{8:67,19:72,41:70,44:237,53:238,59:199,66:71,100:68,103:69,106:$Vh,120:$Vi,122:63,123:64,124:65,125:66,130:$Vj,156:$Vk,157:$Vl,160:$Vv,176:$Vm,177:$Vn,178:$Ve},{8:67,19:72,41:70,44:239,66:71,100:68,103:69,106:$Vh,120:$Vi,122:63,123:64,124:65,125:66,130:$Vj,156:$Vk,157:$Vl,176:$Vm,177:$Vn,178:$Ve},o($Vt,[2,64],{106:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF,112:$VG,113:$VH,114:$VI,115:$VJ,116:$VK,117:$VL,118:$VM,119:$VN,121:$VO}),{61:240,106:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF,112:$VG,113:$VH,114:$VI,115:$VJ,116:$VK,117:$VL,118:$VM,119:$VN,121:$VO,161:$V31},o($VP,[2,132]),{21:242,22:243,131:$VV,162:$VQ},o([14,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,131,158,159,161,162,180],[2,172]),o($V41,[2,135],{106:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF,112:$VG,113:$VH,114:$VI,115:$VJ,116:$VK,117:$VL,118:$VM,119:$VN,121:$VO}),{15:244,158:$Vr},o($Vt,[2,66],{106:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF,112:$VG,113:$VH,114:$VI,115:$VJ,116:$VK,117:$VL,118:$VM,119:$VN,121:$VO}),o($V21,[2,87]),o($V51,[2,140],{108:$VC,109:$VD,110:$VE,111:$VF}),o($V51,[2,141],{108:$VC,109:$VD,110:$VE,111:$VF}),o($V61,[2,142],{110:$VE}),o($V61,[2,143],{110:$VE}),o($VP,[2,144]),o($V61,[2,145],{110:$VE}),o($V71,[2,146],{106:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF}),o($V71,[2,147],{106:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF}),o($V71,[2,148],{106:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF}),o($V71,[2,149],{106:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF}),o($V81,[2,150],{106:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF,112:$VG,113:$VH,114:$VI,115:$VJ}),o($V81,[2,151],{106:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF,112:$VG,113:$VH,114:$VI,115:$VJ}),o([14,118,119,121,131,159,161,162,180],[2,152],{106:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF,112:$VG,113:$VH,114:$VI,115:$VJ,116:$VK,117:$VL}),o([14,119,121,131,159,161,162,180],[2,153],{106:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF,112:$VG,113:$VH,114:$VI,115:$VJ,116:$VK,117:$VL,118:$VM}),{11:245,106:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF,112:$VG,113:$VH,114:$VI,115:$VJ,116:$VK,117:$VL,118:$VM,119:$VN,121:$VO,180:$VS},o($VP,[2,163]),o($VP,[2,166]),o($VP,[2,184]),o($VP,[2,167]),{14:$Vg,36:246},{8:67,19:72,21:248,41:70,44:247,66:71,100:68,103:69,106:$Vh,120:$Vi,122:63,123:64,124:65,125:66,130:$Vj,131:$VV,156:$Vk,157:$Vl,176:$Vm,177:$Vn,178:$Ve},o($Vp,[2,48]),o($Vp,[2,51],{106:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF,112:$VG,113:$VH,114:$VI,115:$VJ,116:$VK,117:$VL,118:$VM,119:$VN,121:$VO}),o($Vp,[2,55]),{8:67,19:72,41:70,44:252,53:251,59:199,60:249,61:250,66:71,100:68,103:69,106:$Vh,120:$Vi,122:63,123:64,124:65,125:66,130:$Vj,156:$Vk,157:$Vl,160:$Vv,161:$V31,176:$Vm,177:$Vn,178:$Ve},o($Vp,[2,52],{51:253,54:254,62:255,59:256,160:$Vv,169:$Vw}),o([14,160,162],$V91,{51:257,169:$Vw}),o($Va1,[2,124]),o($Va1,[2,125]),o($Va1,[2,126]),o($Va1,[2,127]),o($Va1,[2,128]),o($Va1,[2,174]),o($Va1,[2,173]),o($Va1,[2,176]),o($Va1,[2,175]),o($Va1,[2,179]),{15:92,28:259,81:258,82:28,145:$V8,158:$Vr},o([145,158],[2,186]),o([14,158],[2,110]),{14:$Vg,36:260},o($V$,[2,111]),o($Vf,[2,3]),{8:262,12:261,95:202,96:203,97:204,98:205,99:206,132:$VW,133:$VX,134:$VY,135:$VZ,138:$V_,178:$Ve},{2:$V0,4:266,6:267,7:31,8:39,13:24,16:263,17:264,18:265,24:4,25:5,26:6,27:7,28:8,29:9,30:10,31:12,32:13,33:14,34:15,35:16,37:17,38:18,39:19,40:20,41:21,42:22,43:23,45:$V1,46:$V2,47:$V3,48:26,55:43,56:44,57:27,58:45,68:40,73:36,82:28,84:29,85:30,86:34,92:25,100:32,103:35,127:$V4,136:$V5,137:$V6,139:$V7,145:$V8,147:$V9,150:$Va,153:$Vb,154:$Vc,155:$Vd,159:$VT,178:$Ve},{21:268,22:269,131:$VV,162:$VQ},o($Vb1,[2,13]),o($V41,[2,15]),o($V41,[2,16],{11:270,180:$VS}),{8:67,19:72,41:70,44:271,66:71,100:68,103:69,106:$Vh,120:$Vi,122:63,123:64,124:65,125:66,130:$Vj,156:$Vk,157:$Vl,176:$Vm,177:$Vn,178:$Ve},{11:141,14:$VR,51:140,89:272,90:273,91:274,151:[1,276],152:[1,275],169:$Vw,180:$VS},{14:[2,116]},{8:161,178:$Ve},{17:277,77:278,78:231,80:232,148:$V01,149:$V11,159:$VT},o($Vf,[2,96]),o($Vc1,[2,98]),{8:67,19:72,41:70,44:279,66:71,100:68,103:69,106:$Vh,120:$Vi,122:63,123:64,124:65,125:66,130:$Vj,156:$Vk,157:$Vl,176:$Vm,177:$Vn,178:$Ve},{11:280,180:$VS},o([106,120,130,156,157,176,177,178],[2,188]),{180:[2,189]},{8:67,19:72,41:70,44:281,53:282,59:199,66:71,100:68,103:69,106:$Vh,120:$Vi,122:63,123:64,124:65,125:66,130:$Vj,156:$Vk,157:$Vl,160:$Vv,176:$Vm,177:$Vn,178:$Ve},{21:283,131:$VV},{14:$Vg,36:284,106:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF,112:$VG,113:$VH,114:$VI,115:$VJ,116:$VK,117:$VL,118:$VM,119:$VN,121:$VO},{14:$Vg,36:285},{61:286,106:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF,112:$VG,113:$VH,114:$VI,115:$VJ,116:$VK,117:$VL,118:$VM,119:$VN,121:$VO,161:$V31},o($Vd1,[2,82]),o($Vd1,[2,201]),o($VP,[2,133]),{8:67,19:72,41:70,44:287,66:71,100:68,103:69,106:$Vh,120:$Vi,122:63,123:64,124:65,125:66,130:$Vj,156:$Vk,157:$Vl,176:$Vm,177:$Vn,178:$Ve},{8:290,69:288,70:289,178:$Ve},{8:67,19:72,41:70,44:291,66:71,100:68,103:69,106:$Vh,120:$Vi,122:63,123:64,124:65,125:66,130:$Vj,156:$Vk,157:$Vl,176:$Vm,177:$Vn,178:$Ve},o($Vf,[2,121]),{21:292,106:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF,112:$VG,113:$VH,114:$VI,115:$VJ,116:$VK,117:$VL,118:$VM,119:$VN,121:$VO,131:$VV},{14:[2,123]},{22:294,61:293,161:$V31,162:$VQ},o($Ve1,[2,68]),o($Vf1,[2,71]),o([14,161,162],[2,69],{106:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF,112:$VG,113:$VH,114:$VI,115:$VJ,116:$VK,117:$VL,118:$VM,119:$VN,121:$VO}),{8:67,19:72,41:70,44:295,53:296,59:199,66:71,100:68,103:69,106:$Vh,120:$Vi,122:63,123:64,124:65,125:66,130:$Vj,156:$Vk,157:$Vl,160:$Vv,176:$Vm,177:$Vn,178:$Ve},o($Vp,[2,58],{59:256,51:297,62:298,160:$Vv,169:$Vw}),o($Vg1,[2,73]),{61:299,161:$V31},{15:300,158:$Vr},o($Vf,[2,106]),o($Vf,[2,107]),o($Vf,[2,109]),{10:301,15:219,158:$Vr},o([131,158,159,162],$V91),{2:$V0,4:266,6:267,7:31,8:39,13:24,17:302,18:303,24:4,25:5,26:6,27:7,28:8,29:9,30:10,31:12,32:13,33:14,34:15,35:16,37:17,38:18,39:19,40:20,41:21,42:22,43:23,45:$V1,46:$V2,47:$V3,48:26,55:43,56:44,57:27,58:45,68:40,73:36,82:28,84:29,85:30,86:34,92:25,100:32,103:35,127:$V4,136:$V5,137:$V6,139:$V7,145:$V8,147:$V9,150:$Va,153:$Vb,154:$Vc,155:$Vd,159:$VT,178:$Ve},o($Vf,[2,7]),o($Vh1,[2,9]),{2:$V0,6:11,7:31,8:39,13:24,24:57,25:5,26:6,27:7,28:8,29:9,30:10,31:12,32:13,33:14,34:15,35:16,37:17,38:18,39:19,40:20,41:21,42:22,43:23,45:$V1,46:$V2,47:$V3,48:26,55:43,56:44,57:27,58:45,68:40,73:36,82:28,84:29,85:30,86:34,92:25,100:32,103:35,127:$V4,136:$V5,137:$V6,139:$V7,145:$V8,147:$V9,150:$Va,153:$Vb,154:$Vc,155:$Vd,159:[2,10],178:$Ve},o($Vh1,[2,11]),o($Vb1,[2,12]),{8:223,23:304,178:$Ve},{8:262,12:305,95:202,96:203,97:204,98:205,99:206,132:$VW,133:$VX,134:$VY,135:$VZ,138:$V_,178:$Ve},{14:$Vg,36:306,106:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF,112:$VG,113:$VH,114:$VI,115:$VJ,116:$VK,117:$VL,118:$VM,119:$VN,121:$VO},{8:307,178:$Ve},{178:[2,119]},{178:[2,120]},{178:[2,192]},{178:[2,191]},o($Vf,[2,95]),o($Vc1,[2,97]),{11:308,106:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF,112:$VG,113:$VH,114:$VI,115:$VJ,116:$VK,117:$VL,118:$VM,119:$VN,121:$VO,180:$VS},o($Vc1,[2,102],{24:4,25:5,26:6,27:7,28:8,29:9,30:10,6:11,31:12,32:13,33:14,34:15,35:16,37:17,38:18,39:19,40:20,41:21,42:22,43:23,13:24,92:25,48:26,57:27,82:28,84:29,85:30,7:31,100:32,86:34,103:35,73:36,8:39,68:40,55:43,56:44,58:45,15:92,79:309,81:310,4:311,2:$V0,45:$V1,46:$V2,47:$V3,127:$V4,136:$V5,137:$V6,139:$V7,145:$V8,147:$V9,150:$Va,153:$Vb,154:$Vc,155:$Vd,158:$Vr,178:$Ve}),{21:312,106:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF,112:$VG,113:$VH,114:$VI,115:$VJ,116:$VK,117:$VL,118:$VM,119:$VN,121:$VO,131:$VV},{21:313,131:$VV},o($VP,[2,77]),o($Vf,[2,79]),o($Vf,[2,80]),o($Vd1,[2,81]),o($V41,[2,134],{106:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF,112:$VG,113:$VH,114:$VI,115:$VJ,116:$VK,117:$VL,118:$VM,119:$VN,121:$VO}),{17:314,22:315,159:$VT,162:$VQ},o($Vi1,[2,85]),{11:316,180:$VS},o([14,131,159,161,162,180],[2,155],{106:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF,112:$VG,113:$VH,114:$VI,115:$VJ,116:$VK,117:$VL,118:$VM,119:$VN,121:$VO}),{14:[2,122]},o($Ve1,[2,67]),{8:67,19:72,41:70,44:252,53:317,59:199,66:71,100:68,103:69,106:$Vh,120:$Vi,122:63,123:64,124:65,125:66,130:$Vj,156:$Vk,157:$Vl,160:$Vv,176:$Vm,177:$Vn,178:$Ve},o($Vp,[2,53],{106:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF,112:$VG,113:$VH,114:$VI,115:$VJ,116:$VK,117:$VL,118:$VM,119:$VN,121:$VO}),o($Vp,[2,56]),{8:67,19:72,41:70,44:252,53:318,59:199,66:71,100:68,103:69,106:$Vh,120:$Vi,122:63,123:64,124:65,125:66,130:$Vj,156:$Vk,157:$Vl,160:$Vv,176:$Vm,177:$Vn,178:$Ve},o($Vg1,[2,72]),o($Vg1,[2,74]),{8:321,52:319,72:320,178:$Ve},o($Vf,[2,4]),o($Vf,[2,6]),o($Vh1,[2,8]),o($V41,[2,14]),o($V41,[2,17]),{8:155,35:156,57:322,58:45,103:35,178:$Ve},{21:323,131:$VV},o($Vc1,[2,100],{24:4,25:5,26:6,27:7,28:8,29:9,30:10,6:11,31:12,32:13,33:14,34:15,35:16,37:17,38:18,39:19,40:20,41:21,42:22,43:23,13:24,92:25,48:26,57:27,82:28,84:29,85:30,7:31,100:32,86:34,103:35,73:36,8:39,68:40,55:43,56:44,58:45,15:92,81:310,4:311,79:324,2:$V0,45:$V1,46:$V2,47:$V3,127:$V4,136:$V5,137:$V6,139:$V7,145:$V8,147:$V9,150:$Va,153:$Vb,154:$Vc,155:$Vd,158:$Vr,178:$Ve}),o($Vc1,[2,101]),o($Vc1,[2,103]),o($Vc1,[2,104],{25:5,26:6,27:7,28:8,29:9,30:10,6:11,31:12,32:13,33:14,34:15,35:16,37:17,38:18,39:19,40:20,41:21,42:22,43:23,13:24,92:25,48:26,57:27,82:28,84:29,85:30,7:31,100:32,86:34,103:35,73:36,8:39,68:40,55:43,56:44,58:45,24:57,2:$V0,45:$V1,46:$V2,47:$V3,127:$V4,136:$V5,137:$V6,139:$V7,145:$V8,147:$V9,150:$Va,153:$Vb,154:$Vc,155:$Vd,178:$Ve}),{14:$Vg,36:325},{14:$Vg,36:326},{14:$Vg,36:327},{8:290,70:328,178:$Ve},{8:262,12:329,95:202,96:203,97:204,98:205,99:206,132:$VW,133:$VX,134:$VY,135:$VZ,138:$V_,178:$Ve},o($Vf1,[2,70]),o($Vp,[2,57]),{17:330,22:331,159:$VT,162:$VQ},o($Vi1,[2,92]),{11:332,180:$VS},{21:333,131:$VV},{15:335,88:334,158:$Vr},o($Vc1,[2,99]),o($Vf,[2,75]),o($Vf,[2,76]),o($Vf,[2,83]),o($Vi1,[2,84]),o($Vi1,[2,86]),o($Vp,[2,54]),{8:321,72:336,178:$Ve},{8:67,19:72,41:70,44:337,66:71,100:68,103:69,106:$Vh,120:$Vi,122:63,123:64,124:65,125:66,130:$Vj,156:$Vk,157:$Vl,176:$Vm,177:$Vn,178:$Ve},{15:335,88:338,158:$Vr},o($Vf,[2,118]),{2:$V0,4:340,6:11,7:31,8:39,13:24,17:339,24:4,25:5,26:6,27:7,28:8,29:9,30:10,31:12,32:13,33:14,34:15,35:16,37:17,38:18,39:19,40:20,41:21,42:22,43:23,45:$V1,46:$V2,47:$V3,48:26,55:43,56:44,57:27,58:45,68:40,73:36,82:28,84:29,85:30,86:34,92:25,100:32,103:35,127:$V4,136:$V5,137:$V6,139:$V7,145:$V8,147:$V9,150:$Va,153:$Vb,154:$Vc,155:$Vd,159:$VT,178:$Ve},o($Vi1,[2,91]),o($Vi1,[2,93],{106:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF,112:$VG,113:$VH,114:$VI,115:$VJ,116:$VK,117:$VL,118:$VM,119:$VN,121:$VO}),o($Vf,[2,113]),o($Vf,[2,114]),{2:$V0,6:11,7:31,8:39,13:24,17:341,24:57,25:5,26:6,27:7,28:8,29:9,30:10,31:12,32:13,33:14,34:15,35:16,37:17,38:18,39:19,40:20,41:21,42:22,43:23,45:$V1,46:$V2,47:$V3,48:26,55:43,56:44,57:27,58:45,68:40,73:36,82:28,84:29,85:30,86:34,92:25,100:32,103:35,127:$V4,136:$V5,137:$V6,139:$V7,145:$V8,147:$V9,150:$Va,153:$Vb,154:$Vc,155:$Vd,159:$VT,178:$Ve},o($Vf,[2,115])],
defaultActions: {3:[2,2],42:[2,168],46:[2,185],47:[2,193],48:[2,194],49:[2,195],50:[2,190],51:[2,187],53:[2,180],56:[2,1],136:[2,170],154:[2,117],162:[2,182],163:[2,183],226:[2,116],234:[2,189],248:[2,123],273:[2,119],274:[2,120],275:[2,192],276:[2,191],292:[2,122]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    errores = [];
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {Tipo, tipos} = require('./AST/Tipo'); 
    const {Arbol} = require('./AST/Arbol');
    const {Errror} = require('./AST/Errror'); 
    const {Primitivo} = require('./Expresiones/Primitivo');
    const {Aritmetica} = require('./Expresiones/Aritmetica');
    const {Relacional} = require('./Expresiones/Relacional');
    const {Logica} = require('./Expresiones/Logica');
    const {Return} = require('./Expresiones/Return');
    const {Continue} = require('./Expresiones/Continue');
    const {Break} = require('./Expresiones/Break');

    const {Identificador} = require('./Instrucciones/Identificador');
    const {Imprimir} = require('./Instrucciones/Imprimir');
    const {Declaracion} = require('./Instrucciones/Declaracion');
    const {Asignacion} = require('./Instrucciones/Asignacion');
    const {If} = require('./Instrucciones/If');
    const {While} = require('./Instrucciones/While');
    const {Do_while} = require('./Instrucciones/Do_while');
    const {Funcion} = require('./Instrucciones/Funcion');
    const {Llamada_funcion} = require('./Instrucciones/Llamada_funcion');
    const {Ternario} = require('./Instrucciones/Ternario');
    const {For} = require('./Instrucciones/For');
    const {Case} = require('./Instrucciones/Case');
    const {Default} = require('./Instrucciones/Default');
    const {Switch} = require('./Instrucciones/Switch');
    const {For_1} = require('./Instrucciones/For_1');
    const {Typo} = require('./Instrucciones/Typo');
    const {Type_object , Set_type} = require('./Instrucciones/Type_object');
    const {Llamada_type} = require('./Instrucciones/Llamada_type');
    const {Arreglo, Pop, Push, Length, SD_Arreglo, GD_Arreglo} = require('./Instrucciones/Arreglo');
    
    let tipo_dec = "";
    let errores = [];
    let token_error = "";
    let fila_error = 0;
    let columna_error = 0;
    function limpiar_lista(){
            errores = [];
    }
    function unir_listas(lista1, lista2){
        lista1.forEach(element => {
                lista2.push(element);  
        });
        return lista2;
    }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"ranges":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* */
break;
case 1:/* */
break;
case 2:/* skip whitespace */
break;
case 3:/* */
break;
case 4:return 132;
break;
case 5:return 133;
break;
case 6:return 134;
break;
case 7:return 135;
break;
case 8:return 'TK_VAR';
break;
case 9:return 136;
break;
case 10:return 137;
break;
case 11:return 138;
break;
case 12:return 139;
break;
case 13:return 141;
break;
case 14:return 142;
break;
case 15:return 143;
break;
case 16:return 144;
break;
case 17:return 145;
break;
case 18:return 146;
break;
case 19:return 147;
break;
case 20:return 148;
break;
case 21:return 149;
break;
case 22:return 150;
break;
case 23:return 151;
break;
case 24:return 152;
break;
case 25:return 153;
break;
case 26:return 154;
break;
case 27:return 46;
break;
case 28:return 47;
break;
case 29:return 45;
break;
case 30:return 155;
break;
case 31:return 127;
break;
case 32:return 129;
break;
case 33:return 156;
break;
case 34:return 157;
break;
case 35:return 158; 
break;
case 36:return 159;
break;
case 37:return 130;
break;
case 38:return 131;
break;
case 39:return 160;
break;
case 40:return 161;
break;
case 41:return 162;
break;
case 42:return 121;
break;
case 43:return 180;
break;
case 44:return 14;
break;
case 45:return 115;
break;
case 46:return 113;
break;
case 47:return 116;
break;
case 48:return 114;
break;
case 49:return 112;
break;
case 50:return 117;
break;
case 51:return 119;
break;
case 52:return 118;
break;
case 53:return 120;
break;
case 54:return 169;
break;
case 55:return 'TK_MAS_IGUAL';
break;
case 56:return 'TK_MENOS_IGUAL';
break;
case 57:return 'TK_MULTI_IGUAL';
break;
case 58:return 'TK_DIV_IGUAL';
break;
case 59:return 'TK_MOD_IGUAL';
break;
case 60:return 184;
break;
case 61:return 107;
break;
case 62:return 185;
break;
case 63:return 106;
break;
case 64:return 110;
break;
case 65:return 108;
break;
case 66:return 109;
break;
case 67:return 111;
break;
case 68:return 128;
break;
case 69:return 'TK_NULO';
break;
case 70:return 178; /* Varying form */
break;
case 71:return 177;
break;
case 72:return 177;
break;
case 73:return 176;
break;
case 74:return 176;
break;
case 75:return 176;
break;
case 76:return 176;
break;
case 77:return 5;
break;
case 78:errores.push(new Errror("lexico", "No se reconoce el caracter: " + yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column))
break;
}
},
rules: [/^(?:((\/\*)[^\*\/]*(\*\/)))/,/^(?:[ \\\t\r\n\f])/,/^(?:\s+)/,/^(?:(\/\/[^\n]*))/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:var\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:any\b)/,/^(?:type\b)/,/^(?:Array\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:for\b)/,/^(?:of\b)/,/^(?:in\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:function\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:\?)/,/^(?::)/,/^(?:;)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:>=)/,/^(?:>)/,/^(?:!=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:=)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:--)/,/^(?:-)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\.)/,/^(?:null\b)/,/^(?:[_a-zA-Z][a-zA-Z0-9_]*)/,/^(?:(((0|([1-9])([0-9])*))\.((0|([1-9])([0-9])*))+))/,/^(?:((0|([1-9])([0-9])*)))/,/^(?:"")/,/^(?:"([^"]|(\\.))*")/,/^(?:'')/,/^(?:'([^']|(\\.))*')/,/^(?:$)/,/^(?:.)/],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}